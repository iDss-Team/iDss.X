@page "/master/agent"
@using iDss.X.Models
@inject MasterDataPart1Service _service1
@inject MasterDataPart3Service _service3
@inject ToastService ToastService
@attribute [TabItemOption(Text = "Agent")]

<PageTitle>Agent</PageTitle>

<Block OnQueryCondition="OnQueryCondition" Name="table">
    @if (agents != null)
    {
        <Row ItemsPerRow="ItemsPerRow.One">
            <Row ItemsPerRow="ItemsPerRow.Two">
                <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
                    <StackItem>
                        <h5>Agent</h5>
                    </StackItem>
                </Stack>
            </Row>
            <Table Items="agents" IsPagination="true" PageItemsSource="@_service3.PageItemsSource" IsFixedHeader="true" ShowLoading="true"
                   IsStriped="true" IsBordered="true" ShowToolbar="true" AutoGenerateColumns="false" ShowSearch="true" ShowExtendButtons="false"
                   ShowEditButton="false" ShowAddButton="false" ShowDeleteButton="false" EditButtonText="" DeleteButtonText="">
                <TableToolbarTemplate>
                    <TableToolbarButton TItem="Agent"
                                        Color="Color.Primary"
                                        Icon="fa-solid fa-plus"
                                        Text="Add"
                                        OnClick="() => AddNew()" />
                </TableToolbarTemplate>
                <TableColumns>
                    <TableColumn @bind-Field="@context.agentid" />
                    <TableColumn @bind-Field="@context.agentcode" Searchable="true" Filterable="true" />
                    <TableColumn @bind-Field="@context.agentname" Searchable="true" Filterable="true" />
                    <TableColumn @bind-Field="@context.cityname" />
                    <TableColumn @bind-Field="@context.Branch" Text="Branch Name">
                        <Template Context="x">
                            @{
                                var br = x.Row.Branch.branchname;
                                <p>@br</p>
                            }
                        </Template>
                    </TableColumn>
                    <TableColumn @bind-Field="@context.createddate" IsVisibleWhenAdd="false" IsVisibleWhenEdit="false" />
                    <TableColumn @bind-Field="@context.agentid" Text="" Width="70">
                        <Template Context="x">
                            <Button Color="Color.None" Icon="fa-solid fa-pen" Size="Size.ExtraSmall" OnClick="() => UpdateByID(x.Value)" />
                            <span class="w-50"></span>
                            <PopConfirmButton Color="Color.None" Icon="fa-solid fa-trash" IsAsync="true"
                                              Size="Size.ExtraSmall" Content="Are you sure to remove this item?"
                                              OnConfirm="() => RemoveByID(x.Value)" />
                        </Template>
                    </TableColumn>
                </TableColumns>
            </Table>
        </Row>
    }
    else
    {
        <h5>Loading . . .</h5>
    }
</Block>
<Block OnQueryCondition="OnQueryCondition2" Name="detail">
    <Row ItemsPerRow="ItemsPerRow.Two">
        <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
            <StackItem>
                <h5>@titlePage</h5>
            </StackItem>
        </Stack>
    </Row>
    <ValidateForm Model="@data" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
        <Card>
            <BodyTemplate>
                <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Normal">
                    <Select TValue="int" Items="BranchItems" @bind-Value="@data.branchid" ShowSearch></Select>
                    <BootstrapInput TValue="string" @bind-Value="@data.agentcode" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="@data.agentname" ShowLabel="true"></BootstrapInput>
                    <Textarea TValue="string" @bind-Value="@data.addr1" ShowLabel="true"></Textarea>
                    <Select TValue="string" Items="VillageItems" @bind-Value="@data.villid" ShowSearch></Select>
                    <BootstrapInput TValue="string" @bind-Value="@data.latitude" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="@data.longitude" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="@data.phone" DisplayText="Phone" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="@data.email" DisplayText="Email" ShowLabel="true"></BootstrapInput>
                </Row>
            </BodyTemplate>
        </Card>
        <Divider />
        <Stack IsRow="true" Justify="StackJustifyContent.Evenly" AlignItems="StackAlignItems.Center" IsWrap="true">
            <StackItem>
                <Button ButtonType="@ButtonType.Submit" Color="Color.Success" Icon="fa-solid fa-floppy-disk" IsAsync="true" Text="Save" />
                <Divider IsVertical="true" />
                <Button ButtonType="@ButtonType.Button" Color="Color.Secondary" Icon="fa-solid fa-xmark" IsAsync="true" Text="Cancel" OnClick="Cancel" />
            </StackItem>
        </Stack>
    </ValidateForm>
</Block>


@code {
    Modal modals;
    private bool IsTable { get; set; } = true;
    string mode;
    string titlePage;
    string resultString;
    public List<Agent> agents = new();
    private Agent data = new();
    private IEnumerable<SelectedItem>? BranchItems { get; set; }
    private IEnumerable<SelectedItem>? VillageItems { get; set; }
    private Task<bool> OnQueryCondition(string name) => Task.FromResult(IsTable);
    private Task<bool> OnQueryCondition2(string name) => Task.FromResult(!IsTable);


    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }

    private async Task LoadData()
    {
        await RefreshTable();

        var branches = await _service3.LoadBranchAsync();
        BranchItems = branches.Select(b => new SelectedItem(b.branchid.ToString(), b.branchname));

        var districts = await _service1.LoadVillageAsync();
        VillageItems = districts.Select(b => new SelectedItem(b.villid.ToString(), b.villname));

        StateHasChanged();
    }

    private async Task RefreshTable()
    {
        agents = await _service3.GetAgentAsync();
        IsTable = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddNew()
    {
        mode = "input";
        IsTable = false;
        titlePage = "Create Data";
        data = new();
    }

    private async Task UpdateByID(int id)
    {
        data = await _service3.GetAgentByIDAsync(id);
        if (data != null)
        {
            mode = "edit";
            IsTable = false;
            titlePage = "Update Data";
        }
    }

    private async Task RemoveByID(int id)
    {
        bool result = await _service3.DeleteAgentByIDAsync(id);
        if (result)
        {
            await RefreshTable();

            await ToastService.Success("Success", "Selected data was successfully deleted");

        }
        else
        {
            await ToastService.Error("Failed", "an error occurred while deleting data");
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        bool result = mode == "input"
           ? await _service3.CreateAgentAsync(data)
           : await _service3.UpdateAgentAsync(data);
        if (result)
        {
            await RefreshTable();

            if (mode == "input")
            {
                resultString = "Data successfully added";
            }
            else
            {
                resultString = "Data successfully upadated";
            }

            await ToastService.Success("Success", resultString);
        }
        else
        {
            await ToastService.Error("Failed", "an error occurred while saving data");
        }
    }

    private async Task OnInvalidSubmit(EditContext context)
    {

    }

    private async Task Cancel()
    {
        IsTable = true;
    }
}

