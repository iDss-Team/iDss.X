@page "/master/account"
@using iDss.X.Models
@using BootstrapBlazor.Components
@using System.Globalization
@inject ToastService _toastService
@inject MasterDataPart1Service _services
@inject MasterDataPart3Service _services3
@attribute [TabItemOption(Text = "Account")]


<PageTitle>Account Management</PageTitle>

<Block OnQueryCondition="OnQueryCondition" Name="table">
@if (accounts != null)
    {
        <Row ItemsPerRow="ItemsPerRow.One">
            <Row ItemsPerRow="ItemsPerRow.Two">
                <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
                    <StackItem><h5 class="custom">Account</h5></StackItem>
                </Stack>
            </Row>

            <Table IsPagination="true" @ref="accountTable" PageItemsSource="@_services.PageItemsSource" OnQueryAsync="@_services.OnQueryAccountAsync"
            IsFixedHeader="true" ShowLoading="true" IsStriped="true" IsBordered="true"
            ShowToolbar="true" AutoGenerateColumns="false" ShowSearch="true"
            ShowExtendButtons="false" ShowEditButton="false" ShowAddButton="false" ShowDeleteButton="false">

                <TableToolbarTemplate>
                    <TableToolbarButton TItem="Account" Color="Color.Primary" Icon="fa-solid fa-plus"
                    Text="Add" IsAsync OnClick="ShowAddModal" />
                </TableToolbarTemplate>

                <TableColumns>
                    <TableColumn @bind-Field="@context.acctno" Searchable="true" />
                    <TableColumn @bind-Field="@context.cif" Searchable="true" />
                    <TableColumn @bind-Field="@context.acctname" Searchable="true" />
                    <TableColumn @bind-Field="@context.Branch" Text="Branch">
                        <Template Context="x">@x.Row.Branch?.branchname

                        </Template>

                    </TableColumn>
                    <TableColumn @bind-Field="@context.createddate" Searchable="true" />
                    <TableColumn @bind-Field="@context.createdby" Searchable="true" />


                    <TableColumn @bind-Field="@context.isrev" Text="">
                        <Template Context="item">
                            <div class="d-grip gap-2 d-md-block">
                                <Button Text="Edit" OnClick="() => ShowEditModal(item.Row.acctno)" Icon="fa-solid fa-pen" Color="Color.Primary" Size="Size.Small"></Button>
                                <PopConfirmButton Placement="Placement.Top" Color="Color.Danger" ConfirmIcon="fa-solid fa-fw" ConfirmButtonColor="Color.Danger"
                                Text="Delete" Content="Are you sure want to delete the data?" Icon="fa-solid fa-trash"
                                IsAsync="true" OnConfirm="() => DeleteAccount(item.Row.acctno)"></PopConfirmButton>
                            </div>
                        </Template>
                    </TableColumn>


                </TableColumns>





            </Table>
        </Row>
    }
    else
    {
        <h5>Loading...</h5>
    }
</Block>



<Block OnQueryCondition="OnQueryCondition2">
    <Row ItemsPerRow="ItemsPerRow.Two">
        <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
            <StackItem>
                <h5>@modalTitle</h5>
            </StackItem>
        </Stack>
    </Row>

    <ValidateForm @ref="addForm" Model="selectedAccount" @key="@formKey" OnValidSubmit="SaveAccount">
        <Card>
            <BodyTemplate>

                <GroupBox title="General Information" >
                    <Row ItemsPerRow="ItemsPerRow.One">
                        @if (isEditMode)
                        {
                            <BootstrapInput TValue="string" @bind-Value="selectedAccount.acctno" DisplayText="Account Number" ShowLabel="true" IsDisabled="true" />
                        }
                        <AutoComplete Items="CifItems" @bind-Value="selectedAccount.cif" DisplayText="CIF" ShowLabel="true" />
                        <BootstrapInput TValue="string" @bind-Value="selectedAccount.acctname" DisplayText="Account Name" ShowLabel="true" />
                        <Select TValue="int" @bind-Value="selectedAccount.branchid" Items="BranchItems" DisplayText="Branch" ShowSearch="true" ShowLabel="true" />
                        <BootstrapInput TValue="string" @bind-Value="selectedAccount.lob" DisplayText="Line of Business" ShowLabel="true" />
                        <BootstrapInput TValue="string" @bind-Value="selectedAccount.costcenter" DisplayText="Cost Center" ShowLabel="true" />
                        <BootstrapInput TValue="string" @bind-Value="selectedAccount.bankacctno" DisplayText="Bank Account Number" ShowLabel="true" />
                        <Select TValue="string" Items="BankItems" @bind-Value="selectedAccount.bankcode" DisplayText="Bank Code" ShowLabel="true" OnValueChanged="OnBankCodeChanged" />
                        <BootstrapInput TValue="string" @bind-Value="selectedAccount.bankacctname" DisplayText="Bank Name" ShowLabel="true" Readonly="true" />
                    </Row>
                </GroupBox>

                <GroupBox title="Agreement Details">
                    <Row ItemsPerRow="ItemsPerRow.One">
                        <DateTimePicker Value="selectedAccount.agreedate" Format="yyyy-MM-dd" DatePlaceHolderText="Select Agreement Date" ValueChanged="AgreedateChangedCallback" MinValue="@(hasAgreedateMin ? DateTime.Today : null)" />
                        <DateTimePicker @bind-Value="selectedAccount.agreeexpire" Format="yyyy-MM-dd" DatePlaceHolderText="Select Expiry Date" MinValue="@(hasAgreedate ? selectedAccount.agreedate : null)" />
                        <BootstrapInput TValue="string" @bind-Value="selectedAccount.frp" DisplayText="FRP" ShowLabel="true" PlaceHolder="Input FRP"/>
                        <BootstrapInput TValue="string" @bind-Value="selectedAccount.termofpayment" DisplayText="Term of Payment" ShowLabel="true"  PlaceHolder="Input Term of Payment"/>
                         <BootstrapInput TValue="decimal?" @bind-Value="selectedAccount.creditlimit" DisplayText="Credit Limit" ShowLabel="true"
                                        Formatter="@(val => val.HasValue ? val.Value.ToString("C0", new CultureInfo("id-ID")) : string.Empty)" PlaceHolder="Rp0" />
                        <BootstrapInput TValue="string" @bind-Value="selectedAccount.creditperiod" DisplayText="Credit Period" ShowLabel="true" PlaceHolder="Input Credit Period"/>
                        <BootstrapInput TValue="decimal?" @bind-Value="selectedAccount.feecod" DisplayText="Fee CoD" ShowLabel="true" PlaceHolder="Input Fee CoD" />
                        <BootstrapInput TValue="decimal?" @bind-Value="selectedAccount.discrates" DisplayText="Discrates" ShowLabel="true" PlaceHolder="Discount Rates" />
                        <BootstrapInput TValue="decimal?" @bind-Value="selectedAccount.ppn" DisplayText="PPN" ShowLabel="true" Placeholder="Input PPN" />
                        <BootstrapInput TValue="decimal?" @bind-Value="selectedAccount.mgmtfee" DisplayText="Management Fee" ShowLabel="true" PlaceHolder="Input Management Fee" />
                    </Row>
                </GroupBox>

                <GroupBox title="Additional Options">
                    <Row RowType="RowType.Normal" ItemsPerRow="ItemsPerRow.Two">
                        <Checkbox @bind-Value="IsCODChecked" ShowAfterLabel="true" DisplayText="CoD" Size="Size.Medium" />
                        <Checkbox @bind-Value="IsINTLChecked" ShowAfterLabel="true" DisplayText="International" Size="Size.Medium" />
                        <Checkbox @bind-Value="IsNLChecked" ShowAfterLabel="true" DisplayText="National" Size="Size.Medium" />
                        <Checkbox @bind-Value="IsRev" ShowAfterLabel="true" DisplayText="Rev" Size="Size.Medium" />
                        <Checkbox @bind-Value="IsTrace" ShowAfterLabel="true" DisplayText="Trace" Size="Size.Medium" />
                        <Checkbox @bind-Value="IsVAT" ShowAfterLabel="true" DisplayText="VAT" Size="Size.Medium" />
                        <div class="row">
                            <div class="col-md-6">
                                <AutoComplete Items="@StampCostTypeOptions"
                                              @bind-Value="selectedAccount.stampcosttype"
                                              DisplayText="Stamp Duty Type" />
                            </div>

                            <div class="col-md-6">
                                @if (IsVAT)
                                {
                                    <AutoComplete Items="@VatTypeOptions"
                                                  @bind-Value="selectedAccount.vattype"
                                                  DisplayText="VAT Type" />
                                }
                                else
                                {
                                    <div style="height: 38px;"></div> @* Placeholder for alignment *@
                                }
                            </div>
                        </div>



                    </Row>     
                </GroupBox>


                <Block OnQueryCondition="OnQueryCondition3">
                    <Table IsPagination="true" @ref="accountTable" PageItemsSource="@_services.PageItemsSource" OnQueryAsync="@_services.OnQueryAccountAsync"
                           IsFixedHeader="true" ShowLoading="true" IsStriped="true" IsBordered="true"
                           ShowToolbar="true" AutoGenerateColumns="false" ShowSearch="true"
                           ShowExtendButtons="false" ShowEditButton="false" ShowAddButton="false" ShowDeleteButton="false">

                        <TableToolbarTemplate>
                            <TableToolbarButton TItem="Account" Color="Color.Primary" Icon="fa-solid fa-plus"
                                                Text="Add" IsAsync OnClick="ShowAddModal" />
                        </TableToolbarTemplate>

                        <TableColumns>
                            <TableColumn @bind-Field="@context.acctno" Searchable="true" />
                            <TableColumn @bind-Field="@context.cif" Searchable="true" />
                            <TableColumn @bind-Field="@context.acctname" Searchable="true" />
                            <TableColumn @bind-Field="@context.Branch" Text="Branch">
                                <Template Context="x">
                                    @x.Row.Branch?.branchname

                                </Template>

                            </TableColumn>
                            <TableColumn @bind-Field="@context.createddate" Searchable="true" />
                            <TableColumn @bind-Field="@context.createdby" Searchable="true" />


                            <TableColumn @bind-Field="@context.isrev" Text="">
                                <Template Context="item">
                                    <div class="d-grip gap-2 d-md-block">
                                        <Button Text="Edit" OnClick="() => ShowEditModal(item.Row.acctno)" Icon="fa-solid fa-pen" Color="Color.Primary" Size="Size.Small"></Button>
                                        <PopConfirmButton Placement="Placement.Top" Color="Color.Danger" ConfirmIcon="fa-solid fa-fw" ConfirmButtonColor="Color.Danger"
                                                          Text="Delete" Content="Are you sure want to delete the data?" Icon="fa-solid fa-trash"
                                                          IsAsync="true" OnConfirm="() => DeleteAccount(item.Row.acctno)"></PopConfirmButton>
                                    </div>
                                </Template>
                            </TableColumn>


                        </TableColumns>





                    </Table>
                </Block>




            </BodyTemplate>
        </Card>

        <Divider />

        <Stack IsRow="true" Justify="StackJustifyContent.Evenly" AlignItems="StackAlignItems.Center" IsWrap="true">
            <StackItem>
                <Button ButtonType="@ButtonType.Submit" Color="Color.Success" Icon="fa-solid fa-floppy-disk" IsAsync="true" Text="Save" />
                <Divider IsVertical="true" />
                <Button ButtonType="@ButtonType.Button" Color="Color.Secondary" Icon="fa-solid fa-xmark" IsAsync="true" Text="Cancel" OnClick="Cancel" />
            </StackItem>
        </Stack>
    </ValidateForm>
</Block>












@code {
    private Modal addModals;
    private Modal editModals;
    private bool isEditMode = false;
    private bool isTable { get; set; } = true;
	private bool isAddressTable { get; set; } = false;
    public List<Account> accounts = new();
    private Account selectedAccount = new();
    private Table<Account> accountTable;
    string modalTitle = "Add Account";

    private ValidateForm addForm;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;

    private Task<bool> OnQueryCondition(string name) => Task.FromResult(isTable);
    private Task<bool> OnQueryCondition2(string name) => Task.FromResult(!isTable);
    private Task<bool> OnQueryCondition3(string name) => Task.FromResult(isAddressTable);



    private DateTime AllowValue = DateTime.Today;
    private List<SelectedItem> BankItems { get; set; } = new();
    private Dictionary<string, string> BankCodeNameMap { get; set; } = new();

    private IEnumerable<string>? CifItems { get; set; } 
    private List<SelectedItem> BranchItems { get; set; } = new List<SelectedItem>();
    private bool IsEditMode => modalTitle == "Edit Account";

    private List<string> VatTypeOptions => ["Exclude", "Include"];
    private List<string> StampCostTypeOptions => ["NCS", "Customer"];



    private EventCallback<DateTime?> AgreedateChangedCallback =>
       EventCallback.Factory.Create<DateTime?>(this, OnAgreedateChanged);

    private EventCallback<DateTime?> ExpireDateChangedCallback =>
        EventCallback.Factory.Create<DateTime?>(this, OnExpireDateChanged);



    private bool showAccountAddrTable;
    private bool hasAgreedate = false;
    private bool hasAgreedateMin = false;

    private async Task OnAgreedateChanged(DateTime? value)
    {
        if (value.HasValue && value.Value.Date < DateTime.Today)
        {
            
            await _toastService.Warning("Invalid Date", "Agreement date cannot be in the past.");
            selectedAccount.agreedate = null;
        }
        else
        {
            selectedAccount.agreedate = value;
        }

        StateHasChanged();
    }


    public Task OnExpireDateChanged(DateTime? value)
    {
        selectedAccount.agreeexpire = value;
        return Task.CompletedTask;
    }



    private string selectedIndustryId;
    private string selectedBranchId;

    private bool IsCODChecked
    {
        get => selectedAccount.iscod == 1;
        set => selectedAccount.iscod = value ? 1 : 0;
    }
    private bool IsINTLChecked
    {
        get => selectedAccount.isintl == 1;
        set => selectedAccount.isintl = value ? 1 : 0;
    }
    private bool IsNLChecked
    {
        get => selectedAccount.isnl == 1;
        set => selectedAccount.isnl = value ? 1 : 0;
    }
    private bool IsRev
    {
        get => selectedAccount.isrev == 1;
        set => selectedAccount.isrev = value ? 1 : 0;
    }
    private bool IsTrace
    {
        get => selectedAccount.istrace == 1;
        set => selectedAccount.istrace = value ? 1 : 0;
    }
    private bool IsVAT
    {
        get => selectedAccount.isvat == 1;
        set => selectedAccount.isvat = value ? 1 : 0;
    }
    private Guid formKey = Guid.NewGuid();

    private Task OnBankCodeChanged(string? code)
    {
        selectedAccount.bankcode = code;

        if (!string.IsNullOrEmpty(code) && BankCodeNameMap.TryGetValue(code, out var name))
        {
            selectedAccount.bankacctname = name;
        }
        else
        {
            selectedAccount.bankacctname = null;
        }

        return Task.CompletedTask;
    }







    private string branchidStr
    {
        get => selectedAccount.branchid == 0 ? "0" : selectedAccount.branchid.ToString();
        set
        {
            if (int.TryParse(value, out var val))
            {
                selectedAccount.branchid = val;
            }
            else
            {
                selectedAccount.branchid = 0;
            }
        }
    }
    private async Task Cancel()
    {
        isTable = true;
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        accounts = (await _services.GetAllAccountAsync()).ToList();

        var branches = await _services3.LoadBranchAsync();
        BranchItems = branches
            .DistinctBy(x => x.branchid)
            .OrderBy(x => x.branchname)
            .Select(x => new SelectedItem
                {
                    Text = x.branchname,
                    Value = x.branchid.ToString()
                }).ToList();

        BranchItems.Insert(0, new SelectedItem { Text = "Please Select Branch", Value = "0" });

        var cifs = await _services.GetCifListAsync();
        CifItems = cifs.Select(x => x.cif).ToList(); 

        var banks = await _services.GetBankAsync(); 
        BankItems = banks.
        Select(x => new SelectedItem
        {
            Text = $"{x.bankname} ({x.bankcode})",
		    Value = x.bankcode   
        }).ToList(); 

        BankItems.Insert(0, new SelectedItem { Text = "Please Select Bank", Value = "0" });

        BankCodeNameMap = banks.ToDictionary(x => x.bankcode, x => x.bankname);

        StateHasChanged();
    }




    private async Task LoadDropdownData()
    {
        var branches = await _services3.LoadBranchAsync();
        BranchItems = branches
            .DistinctBy(x => x.branchid)
            .OrderBy(x => x.branchname)
            .Select(x => new SelectedItem
                {
                    Text = x.branchname,
                    Value = x.branchid.ToString()
                }).ToList();

        var cifs = await _services.GetCifAsync();
        CifItems = cifs.Select(x => x.cif);
    }
    private async Task ShowAddModal()
    {
        isTable = false;
        selectedAccount = new Account();
        isEditMode = false;
        // selectedAccount.agreedate = null;   
        // selectedAccount.agreeexpire = null;
        formKey = Guid.NewGuid();
        modalTitle = "Create New Account";
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);
    }
    private async Task ShowEditModal(string acct)
    {
        var data = await _services.GetAccountByAcctNoAsync(acct);
        isTable = false;

        selectedAccount = new Account
            {
                acctno = data.acctno,
                acctname = data.acctname,
                cif = data.cif,
                branchid = data.branchid,
                lob = data.lob,
                costcenter = data.costcenter,
                bankacctno = data.bankacctno,
                bankacctname = data.bankacctname,
                bankcode = data.bankcode,
                frp = data.frp,
                agreedate = data.agreedate,
                agreeexpire = data.agreeexpire,
                termofpayment = data.termofpayment,
                creditlimit = data.creditlimit,
                creditperiod = data.creditperiod,
                iscod = data.iscod,
                feecod = data.feecod,
                isintl = data.isintl,
                isnl = data.isnl,
                discrates = data.discrates,
                isrev = data.isrev,
                istrace = data.istrace,
                isvat = data.isvat,
                vattype = data.vattype,
				ppn = data.ppn,
				stampcosttype = data.stampcosttype,
                flag    = data.flag,
				modifieddate = DateTime.Now,
				modifier = "System",
            };
        isEditMode = true;
        modalTitle = "Edit Account";
    }
    private async Task SaveAccount(EditContext context)
    {
        bool isExisting = !string.IsNullOrWhiteSpace(selectedAccount.acctno)
                          && accounts.Any(c => c.acctno == selectedAccount.acctno);

        bool result;
        if (isEditMode)
        {
            selectedAccount.modifieddate = DateTime.Now;
            selectedAccount.modifier = "System";
            result = await _services.UpdateAccountAsync(selectedAccount.acctno, selectedAccount);
            await _toastService.Success("Success", $"Account {selectedAccount.acctno} updated successfully");
        }
        else
        {
            selectedAccount.flag = 1;
            selectedAccount.createddate = DateTime.Now;
            selectedAccount.createdby = "System";

            var createdAccount = await _services.CreateAccountAsync(selectedAccount);
            result = createdAccount != null;
            await _toastService.Success("Success", $"Account {selectedAccount.acctno} created successfully");
        }

        if (result)
        {
            await LoadData();
            isTable = true;
            await accountTable.QueryAsync();
            StateHasChanged();
        }
     
    }
    private async Task<bool> DeleteAccount(string acctno)
    {
        var result = await _services.DeleteAccountAsync(acctno);
        if (result)
        {
            await LoadData();
        }
		StateHasChanged();
        await accountTable.QueryAsync();
        return result;
    }





}
