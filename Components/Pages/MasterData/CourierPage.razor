@page "/master/courier"
@using iDss.X.Models
@inject MasterDataPart1Service _service1
@inject MasterDataPart2Service _service2
@inject MasterDataPart3Service _service3
@attribute [TabItemOption(Text = "Couier Code")]

<PageTitle>Courier Page</PageTitle>

@if (couriers != null){
    <Row  ItemsPerRow="ItemsPerRow.One">
        <Row ItemsPerRow="ItemsPerRow.Two">
            <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
                <StackItem>
                    <h5>Courier Code</h5>
                </StackItem>
            </Stack> 
        </Row>
        <Table Items="couriers" IsPagination="true" PageItemsSource="@_service2.PageItemsSource" IsFixedHeader="true" ShowLoading="true"
            IsStriped="true" IsBordered="true" ShowToolbar="true" AutoGenerateColumns="false" ShowSearch="true" ShowExtendButtons="true"
               ShowEditButton="false" ShowAddButton="false" ShowDeleteButton="false" 
            OnEditAsync="ShowEditModal" EditButtonText="" OnDeleteAsync="DeleteCourier" DeleteButtonText="">
            <TableToolbarTemplate>
                <TableToolbarButton TItem="Courier"
                Color="Color.Primary"
                Icon="fa-solid fa-plus"
                Text="Add"
                IsAsync OnClickCallback="@ShowAddModal" />
            </TableToolbarTemplate>
            <TableColumns>
                <TableColumn @bind-Field="@context.nip" Searchable="true" Filterable="true"/>
                <TableColumn @bind-Field="@context.couriercode" Searchable="true" Filterable="true" />
                <TableColumn @bind-Field="@context.couriername" Searchable="true" Filterable="true" />
                <TableColumn @bind-Field="@context.Branch" Text="Branch Name">
                    <Template Context="x">
                        @{
                            var br = x.Row.Branch.branchname;
                            <p>@br</p>
                        }
                    </Template>
                </TableColumn>
                <TableColumn @bind-Field="@context.createddate" IsVisibleWhenAdd="false" IsVisibleWhenEdit="false" />
                @* <TableColumn @bind-Field="@context.nip">
                    <Template Context="x">
                        <Button OnClick="ShowEditModal"></Button>
                    </Template>
                </TableColumn> *@
            </TableColumns>
        </Table>
    </Row>

}else{
    <h5>Loading . . .</h5>
}

<Modal @ref="modals">
    <ModalDialog Size="Size.ExtraLarge" Title="@modalTitle" ShowSaveButton="true" OnSaveAsync="SaveCourier">
        <BodyTemplate>
            <ValidateForm Model="couriers" >
                <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Inline">
                    <BootstrapInput TValue="string" @bind-Value="selectedCourier.nip" DisplayText="NIP" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedCourier.couriercode" DisplayText="Courier Code" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedCourier.couriername" DisplayText="Courier Name" ShowLabel="true"></BootstrapInput>
                    @* <AutoComplete Items="@BranchItems" @bind-Value="selectedCourier.branchname" DisplayText="Branch"></AutoComplete>
                    <AutoComplete Items="@DistrictItems" @bind-Value="selectedCourier.distid" DisplayText="District"></AutoComplete> *@
                    <Select Items="@BranchItems" @bind-Value="selectedCourier.branchid" DisplayText="Branch"></Select>
                    <Select Items="@DistrictItems" @bind-Value="selectedCourier.distid" DisplayText="District"></Select>
                    <BootstrapInput TValue="string" @bind-Value="selectedCourier.phone" DisplayText="Phone" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="int?" @bind-Value="selectedCourier.freqdelivery" DisplayText="frequency Delivery" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="int?" @bind-Value="selectedCourier.fuelquota" DisplayText="fuel Quota" ShowLabel="true"></BootstrapInput>
                </Row>
            </ValidateForm>
        </BodyTemplate>
    </ModalDialog>
</Modal>

@code {
    Modal modals;
    public List<Courier> couriers = new();
    // private List<Branch> branches = new();
    private IEnumerable<SelectedItem>? DistrictItems { get; set; }
    private IEnumerable<SelectedItem>? BranchItems { get; set; }

    private bool isModalOpen = false;
    private string modalTitle = "Add Courier";
    private Courier selectedCourier = new();

    // private IEnumerable<Courier>? Items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        couriers = await _service2.GetCourierAsync();


        var districts = await _service1.LoadDistrictAsync();
        DistrictItems = districts.Select(b => new SelectedItem(b.distid.ToString(), b.distname));
        // DistrictItems = districts.Select(b => b.distname);

        var branches = await _service3.LoadBranchAsync();
        BranchItems = branches.Select(b => new SelectedItem(b.branchid.ToString(), b.branchname));
        // BranchItems = branches.Select(b => b.branchname);

        StateHasChanged();
    }

    private async Task ShowAddModal(IEnumerable<Courier> items)
    {
        selectedCourier = new Courier();
        modalTitle = "Create New Courier Data";
        isModalOpen = true;

        modals.Show();
    }

    private async Task ShowEditModal(Courier courier)
    {
        selectedCourier = new Courier
            {
                nip = courier.nip,
                couriername = courier.couriername,
                couriercode = courier.couriercode,
                branchid = courier.branchid,
                phone = courier.phone
            };

        modalTitle = "Update Courier Data";
        // isModalOpen = true;
        // modals.Show();
    }

    private async Task<bool> SaveCourier()
    {
        bool result;
        if (couriers.Any(c => c.nip == selectedCourier.nip))
        {
            result = await _service2.UpdateCourierAsync(selectedCourier);
        }
        else
        {
            result = await _service2.CreateCourierAsync(selectedCourier);
        }

        if (result)
        {
            isModalOpen = false;
            await LoadData();
            StateHasChanged();
        }

        return result;
    }

    private async Task<bool> DeleteCourier(IEnumerable<Courier> couriers)
    {
        bool result = await _service2.DeleteCourierAsync(couriers);
        if (result)
        {
            await LoadData();
            StateHasChanged();
        }

        return result;
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }
}

