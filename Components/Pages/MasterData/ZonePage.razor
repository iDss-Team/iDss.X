@page "/master/zone"
@using iDss.X.Models
@using BootstrapBlazor.Components
@using System.Globalization
@inject ToastService _toastService
@inject MasterDataPart1Service _services
@inject MasterDataPart3Service _services3
@attribute [TabItemOption(Text = "Zone")]

<PageTitle>Zone Management Data</PageTitle>

@if (zones != null)
{
    <Row ItemsPerRow="ItemsPerRow.One">
        <Row ItemsPerRow="ItemsPerRow.Two">
            <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
                <StackItem><h5>Zone Master Data</h5></StackItem>
            </Stack>
        </Row>






        <Table @ref="zoneTable" IsPagination="true" PageItemsSource="@_services.PageItemsSource" OnQueryAsync="@_services.OnQueryZoneAsync"
               IsFixedHeader="true" ShowLoading="true" IsStriped="true" IsBordered="true"
               ShowToolbar="true" AutoGenerateColumns="false" ShowSearch="true"
               ShowExtendButtons="false" ShowEditButton="false" ShowAddButton="false" ShowDeleteButton="false">

            <TableToolbarTemplate>
                <TableToolbarButton TItem="Zone" Color="Color.Primary" Icon="fa-solid fa-plus"
                                    Text="Add" IsAsync OnClickCallback="@ShowAddModal" />
            </TableToolbarTemplate>

            <TableColumns>
                <TableColumn @bind-Field="@context.zoneid" Searchable="true" />
                <TableColumn @bind-Field="@context.zonename" Searchable="true" />
                <TableColumn @bind-Field="@context.zonegroup" Searchable="true" />
                <TableColumn @bind-Field="@context.createdby" Searchable="true" />
                <TableColumn @bind-Field="@context.createddate" Searchable="true" />
                <TableColumn @bind-Field="@context.createdby" Text="">
                    <Template Context="item">
                        <div class="d-grip gap-2 d-md-block">
                            <Button Text="Edit" OnClick="() => ShowEditModal(item.Row.zoneid)" Icon="fa-solid fa-pen" Color="Color.Primary" Size="Size.Small"></Button>
                            <PopConfirmButton Placement="Placement.Top" Color="Color.Danger" ConfirmIcon="fa-solid fa-fw" ConfirmButtonColor="Color.Danger"
                                              Text="Delete" Content="Are you sure want to delete the data?" Icon="fa-solid fa-trash"
                                              IsAsync="true" OnConfirm="() => DeleteZone(item.Row.zoneid)"></PopConfirmButton>
                        </div>
                    </Template>
                </TableColumn>

            </TableColumns>
        </Table>
    </Row>
}
else
{
    <h5>Loading...</h5>
}

<Modal @ref="addModals">
    <ModalDialog Size="Size.Large" Title="@modalTitle" ShowSaveButton="true" OnSaveAsync="SaveZone">
        <BodyTemplate>
            <ValidateForm @ref="addForm" Model="selectedZone" @key="formKey">
                <Row ItemsPerRow="ItemsPerRow.Two">
                    @*  <BootstrapInput TValue="string" @bind-Value="selectedCif.cif" DisplayText="CIF" ShowLabel="true" PlaceHolder="Input CIF"/> *@
                    <BootstrapInput TValue="string" @bind-Value="selectedZone.zoneid"  ShowLabel="true" PlaceHolder="Input Zone ID" />
                    <BootstrapInput TValue="string" @bind-Value="selectedZone.zonename" ShowLabel="true" PlaceHolder="Input Zone Name" />
                    <BootstrapInput TValue="string" @bind-Value="selectedZone.zonegroup" ShowLabel="true" PlaceHolder="Input Zone Group" />
                </Row>
            </ValidateForm>
        </BodyTemplate>
    </ModalDialog>
</Modal>





<Modal @ref="editModals">
    <ModalDialog Size="Size.Large" Title="@modalTitle" ShowSaveButton="true" OnSaveAsync="SaveZone">
        <BodyTemplate>
            <ValidateForm Model="selectedZone">
                <Row ItemsPerRow="ItemsPerRow.Two">
                    <BootstrapInput TValue="string" @bind-Value="selectedZone.zoneid" ShowLabel="true" PlaceHolder="Input Zone ID" />
                    <BootstrapInput TValue="string" @bind-Value="selectedZone.zonename" ShowLabel="true" PlaceHolder="Input Zone Name" />
                    <BootstrapInput TValue="string" @bind-Value="selectedZone.zonegroup" ShowLabel="true" PlaceHolder="Input Zone Group" />
                </Row>
            </ValidateForm>
        </BodyTemplate>
    </ModalDialog>
</Modal>


@code {
    private Modal addModals;
    private Modal editModals;
    private ValidateForm addForm;


    private Table<Zone> zoneTable;
    public List<Zone> zones = new();
    private Zone selectedZone = new();
    string modalTitle = "Add Zone";

    private bool IsEditMode => modalTitle == "Edit Zone";
    private Guid formKey = Guid.NewGuid();









    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        zones = await _services.GetZoneAsync();
        StateHasChanged();
    }

    private async Task ShowAddModal(IEnumerable<Zone> items)
    {
        selectedZone = new Zone();
        modalTitle = "Create New Zone";
        formKey = Guid.NewGuid();
        addModals.Show();
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowEditModal(string zoneid)
    {
        var data = await _services.GetZoneByZoneIDAsync(zoneid);

        selectedZone = new Zone
            {
                zoneid = data.zoneid,
                zonename = data.zonename,
				zonegroup = data.zonegroup
            };

        modalTitle = "Edit Zone";
        editModals.Show();
    }

    private async Task<bool> SaveZone()
    {

        if (string.IsNullOrWhiteSpace(selectedZone.zoneid))
        {
            await _toastService.Error("Validation Failed", "Zone ID is required.");
            return false;
        }


        bool result;
        if (IsEditMode)
        {
            selectedZone.modifieddate = DateTime.Now;
            selectedZone.modifier = "System";
            result = await _services.UpdateZoneAsync(selectedZone.zoneid, selectedZone);
            if (result)
            {
                await _toastService.Success("Success", "Zone updated successfully");
                editModals.Close();
            }
        }
        else
        {
            selectedZone.createddate = DateTime.Now;
            selectedZone.createdby = "System";
            result = await _services.CreateZoneAsync(selectedZone);
            if (result)
            {
                await _toastService.Success("Success", "Zone saved successfully");
                addModals.Close();
            }
        }

        if (result)
        {
            await LoadData();
            await zoneTable.QueryAsync();
            StateHasChanged();
        }

        return result;
    }


    private async Task<bool> DeleteZone(string zoneid)
    {
        var result = await _services.DeleteZoneAsync(zoneid);
        if (result)
        {
            await LoadData();
        }
        StateHasChanged();
        await zoneTable.QueryAsync();
        return result;
    }
}
