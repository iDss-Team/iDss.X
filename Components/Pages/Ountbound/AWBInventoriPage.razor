@page "/ocl/awbinventory"
@using System.Text
@using iDss.X.Models
@inject MasterDataPart1Service _service1
@inject MasterDataPart2Service _service2
@inject MasterDataPart3Service _service3
@inject OutboundService _oclservice
@inject ToastService toastService
@attribute [TabItemOption(Text = "AWB Inventory")]

<PageTitle>AWB Inventory</PageTitle>

@* Header Section *@  
<Row ItemsPerRow="ItemsPerRow.One" style="margin-bottom: 16px">
    <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
        <StackItem>
            <h5>Request AWB</h5>
        </StackItem>
    </Stack>
</Row>

@* Content *@

@* layout 1 *@
<Row ItemsPerRow="ItemsPerRow.One" Style="padding-left: 16px; padding-right: 16px; margin-bottom: 16px;">
    <div class="row g-4">
        <div class="col-6">
            <div class="mb-3" style="width: 100%; max-width: 300px">
                <Select TValue="string"
                        Items="provinceItems"
                        @bind-Value="selectedProvince"
                        DisplayText="Provinsi:"
                        ShowLabel="true" />
            </div>

            <div class="mb-3" style="width: 100%; max-width: 300px">
                <Select TValue="int"
                        Items="branchItems"
                        @bind-Value="selectedBranch"
                        DisplayText="Branch:"
                        ShowLabel="true" />
            </div>

            <div class="mb-3">
                <Stack IsRow="true" style="gap: 24px">

                    <div style="display: flex; flex-direction: column; width: 100px;">
                        <BootstrapInputNumber @bind-Value="@totalRequest"
                                                Max="10000"
                                                Min="0"
                                                IsSelectAllTextOnFocus="true"
                                                ShowLabel="true"
                                                DisplayText="Total Request"
                                                style="width: 100%;" />
                        <div style="text-align: center; font-size: 12px; color: gray;font-style: italic; margin-top: 2px;">
                            Max 10.000 pcs
                        </div>
                    </div>


                    <div style="display: flex; flex-direction: column; width: 100px;">
                        <BootstrapInput TValue="string"
                                        IsAutoFocus="true"
                                        Readonly="true"
                                        IsSelectAllTextOnFocus="true"
                                        ShowLabel="true"
                                        DisplayText="Available AWB"
                                        style="width: 100%;" />
                    </div>

                </Stack>
            </div>

            <div class="mb-3">
                <Stack IsRow="true" style="gap: 24px">
                    <Button ButtonType="ButtonType.Submit"
                            Size="Size.Small"
                            Color="Color.Success"
                            Icon="fa-solid fa-circle-plus me-2"
                            Style="min-width: 100px;" @onclick="HandleCreate">
                        CREATE
                    </Button>

                    <Button ButtonType="ButtonType.Reset"
                            Size="Size.Small"
                            Color="Color.Danger"
                            Icon="fa-solid fa-arrows-rotate me-2"
                            Style="min-width: 100px;" @onclick="HandleReset">
                        Reset
                    </Button>

                </Stack>
            </div>
        </div>
        <div class="col-6">
            <Console Items="@Messages" Height="200" ShowAutoScroll="true" OnClear="@OnClear" />
        </div>
    </div>
</Row>




@code {
    public int totalRequest { get; set; } = 0;

    private List<ConsoleMessageItem> Messages { get; set; } = new();
    private List<SelectedItem> provinceItems = new();
    private List<SelectedItem> branchItems = new();
    private string selectedProvince;
    private int selectedBranch;

    private readonly Random _random = new Random();

    protected override async Task OnInitializedAsync()
    {
        await LoadProvinceAsync();
        await LoadBranchAsync();
    }

    private async Task LoadProvinceAsync()
    {
        var dataProvince = await _oclservice.GetAllProvinceAsync();

        provinceItems = dataProvince.Select(p => new SelectedItem
            {
                Text = $"{p.provid} | {p.provname}",
                Value = p.provid
            }).ToList();

        provinceItems.Insert(0, new SelectedItem { Text = "Please Select ...", Value = "0" });
    }

    private async Task LoadBranchAsync()
    {
        var dataBranch = await _oclservice.GetAllBranchAsync();

        branchItems = dataBranch.Select(b => new SelectedItem
            {
                Text = $"{b.villid} | {b.branchname}",
                Value = b.branchid.ToString()
            }).ToList();
        branchItems.Insert(0, new SelectedItem { Text = "Please Select ...", Value = "0" });
    }

    private async Task<bool> ValidateInputAsync()
    {
        // Validasi Provinsi
        if (string.IsNullOrEmpty(selectedProvince) || selectedProvince == "0")
        {
            await toastService.Show(new ToastOption
                {
                    Category = ToastCategory.Warning,
                    Content = "⚠️ Silakan pilih provinsi terlebih dahulu.",
                    ShowHeader = false,
                });

            return false;
        }

        // Validasi Branch
        if (selectedBranch == 0)
        {
            await toastService.Show(new ToastOption
                {
                    Category = ToastCategory.Warning,
                    Content = "⚠️ Silakan pilih branch terlebih dahulu.",
                    ShowHeader = false
                });

            return false;
        }

        // Validasi Total Request
        if (totalRequest <= 0 || totalRequest > 10000)
        {
            await toastService.Show(new ToastOption
                {
                    Category = ToastCategory.Warning,
                    Content = "⚠️ Jumlah harus antara 1 sampai 10.000.",
                    ShowHeader = false,
                });

            return false;
        }

        return true;
    }

    private async Task HandleCreate()
    {
        if (!await ValidateInputAsync()) return;

        var sb = new StringBuilder();

        for (int i = 0; i < totalRequest; i++)
        {
            sb.AppendLine(GenerateRandomAWB());
        }

        Messages.Add(new ConsoleMessageItem
            {
                Message = $"[{DateTime.Now:HH:mm:ss}] Generate {totalRequest} AWB sukses.",
                Color = Color.Success
            });


        await toastService.Show(new ToastOption
            {
                Category = ToastCategory.Success,
                Title = "Sukses",
                Content = $"✅ Berhasil generate {totalRequest} AWB."
            });
    }


    private string GenerateRandomAWB()
    {
        return DateTime.Now.ToString("yyMMdd") + _random.Next(100000, 999999).ToString();
    }

    private void HandleReset()
    {
        totalRequest = 0;
        selectedProvince = "0";
        selectedBranch = 0;
    }
    private void OnClear()
    {
        Messages.Clear();
    }


}






