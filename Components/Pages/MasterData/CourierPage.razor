@page "/master/courier"
@using iDss.X.Models
@inject MasterDataPart1Service _service1
@inject MasterDataPart2Service _service2
@inject MasterDataPart3Service _service3
@inject ToastService ToastService
@attribute [TabItemOption(Text = "Couier Code")]

<PageTitle>Courier Page</PageTitle>

<Block OnQueryCondition="OnQueryCondition" Name="table">
@if (couriers != null){
        <Row  ItemsPerRow="ItemsPerRow.One">
            <Row ItemsPerRow="ItemsPerRow.Two">
                <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
                    <StackItem>
                        <h5>Courier Code</h5>
                    </StackItem>
                </Stack> 
            </Row>
            <Table Items="couriers" IsPagination="true" PageItemsSource="@_service2.PageItemsSource" IsFixedHeader="true" ShowLoading="true"
            IsStriped="true" IsBordered="true" ShowToolbar="true" AutoGenerateColumns="false" ShowSearch="true" ShowExtendButtons="false"
            ShowEditButton="false" ShowAddButton="false" ShowDeleteButton="false" 
            OnEditAsync="ShowEditModal" EditButtonText="" OnDeleteAsync="DeleteCourier" DeleteButtonText="">
                <TableToolbarTemplate>
                    <TableToolbarButton TItem="Courier"
                    Color="Color.Primary"
                    Icon="fa-solid fa-plus"
                    Text="Add"
                    OnClick="() => AddNew()" />
                </TableToolbarTemplate>
                <TableColumns>
                    <TableColumn @bind-Field="@context.nip" Searchable="true" Filterable="true"/>
                    <TableColumn @bind-Field="@context.couriercode" Searchable="true" Filterable="true" />
                    <TableColumn @bind-Field="@context.couriername" Searchable="true" Filterable="true" />
                    <TableColumn @bind-Field="@context.Branch" Text="Branch Name">
                        <Template Context="x">
                            @{
                                var br = x.Row.Branch.branchname;
                                <p>@br</p>
                            }
                        </Template>
                    </TableColumn>
                    <TableColumn @bind-Field="@context.createddate" IsVisibleWhenAdd="false" IsVisibleWhenEdit="false" />
                    <TableColumn @bind-Field="@context.nip" Text="" Width="70">
                        <Template Context="x">
                            <PopConfirmButton Color="Color.None" Icon="fa-solid fa-trash" IsAsync="true"
                            Size="Size.ExtraSmall" Content="Are you sure to remove this item?"
                            OnConfirm="() => RemoveByID(x.Value)" />
                            <span class="w-50"></span>
                            <Button Color="Color.None" Icon="fa-solid fa-pen" Size="Size.ExtraSmall" OnClick="() => UpdateByID(x.Value)" />
                        </Template>
                    </TableColumn>
                </TableColumns>
            </Table>
        </Row>

    }else{
        <h5>Loading . . .</h5>
    }
</Block>


<Block OnQueryCondition="OnQueryCondition2" Name="detail">
    <Row ItemsPerRow="ItemsPerRow.Two">
        <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
            <StackItem>
                <h5>@titlePage</h5>
            </StackItem>
        </Stack>
    </Row>
    <ValidateForm Model="@data" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
        <Card>
            <BodyTemplate>
                    <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Inline">
                        <BootstrapInput TValue="string" @bind-Value="@data.nip" DisplayText="NIP" ShowLabel="true"></BootstrapInput>
                        <BootstrapInput TValue="string" @bind-Value="@data.couriercode" DisplayText="Courier Code" ShowLabel="true"></BootstrapInput>
                        <BootstrapInput TValue="string" @bind-Value="@data.couriername" DisplayText="Courier Name" ShowLabel="true"></BootstrapInput>
                        <Select TValue="int" Items="BranchItems" @bind-Value="@data.branchid" ShowSearch></Select>
                        <Select TValue="string" Items="DistrictItems" @bind-Value="@data.distid" ShowSearch></Select>
                        <BootstrapInput TValue="string" @bind-Value="@data.phone" DisplayText="Phone" ShowLabel="true"></BootstrapInput>
                        <BootstrapInput TValue="int?" @bind-Value="@data.freqdelivery" DisplayText="frequency Delivery" ShowLabel="true"></BootstrapInput>
                        <BootstrapInput TValue="int?" @bind-Value="@data.fuelquota" DisplayText="fuel Quota" ShowLabel="true"></BootstrapInput>
                    </Row>
            </BodyTemplate>
        </Card>
        <Divider />
        <Stack IsRow="true" Justify="StackJustifyContent.Evenly" AlignItems="StackAlignItems.Center" IsWrap="true" >
            <StackItem>
                <Button ButtonType="@ButtonType.Submit" Color="Color.Success" Icon="fa-solid fa-floppy-disk" IsAsync="true" Text="Save" />
                <Divider IsVertical="true" />
                <Button ButtonType="@ButtonType.Button" Color="Color.Secondary" Icon="fa-solid fa-xmark" IsAsync="true" Text="Cancel" OnClick="Cancel" />
            </StackItem>
        </Stack>
    </ValidateForm>
</Block>

<Modal @ref="modals">
    <ModalDialog Size="Size.ExtraLarge" Title="@modalTitle" ShowSaveButton="true" OnSaveAsync="SaveCourier">
        <BodyTemplate>
            <ValidateForm Model="couriers" >
                <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Inline">
                    <BootstrapInput TValue="string" @bind-Value="selectedCourier.nip" DisplayText="NIP" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedCourier.couriercode" DisplayText="Courier Code" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedCourier.couriername" DisplayText="Courier Name" ShowLabel="true"></BootstrapInput>
                    @* <AutoComplete Items="@BranchItems" @bind-Value="selectedCourier.branchname" DisplayText="Branch"></AutoComplete>
                    <AutoComplete Items="@DistrictItems" @bind-Value="selectedCourier.distid" DisplayText="District"></AutoComplete> *@
                    <Select Items="@BranchItems" @bind-Value="selectedCourier.branchid" DisplayText="Branch"></Select>
                    <Select Items="@DistrictItems" @bind-Value="selectedCourier.distid" DisplayText="District"></Select>
                    <BootstrapInput TValue="string" @bind-Value="selectedCourier.phone" DisplayText="Phone" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="int?" @bind-Value="selectedCourier.freqdelivery" DisplayText="frequency Delivery" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="int?" @bind-Value="selectedCourier.fuelquota" DisplayText="fuel Quota" ShowLabel="true"></BootstrapInput>
                </Row>
            </ValidateForm>
        </BodyTemplate>
    </ModalDialog>
</Modal>

@code {
    Modal modals;
    private bool IsTable { get; set; } = true;
    string mode;
    string titlePage;
    string resultString;
    public List<Courier> couriers = new();
    private Courier data = new();
    // private List<Branch> branches = new();
    private IEnumerable<SelectedItem>? DistrictItems { get; set; }
    private IEnumerable<SelectedItem>? BranchItems { get; set; }
    private Task<bool> OnQueryCondition(string name) => Task.FromResult(IsTable);
    private Task<bool> OnQueryCondition2(string name) => Task.FromResult(!IsTable);

    private bool isModalOpen = false;
    private string modalTitle = "Add Courier";
    private Courier selectedCourier = new();

    // private IEnumerable<Courier>? Items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }

    private async Task LoadData()
    {
        await RefreshTable();


        var districts = await _service1.LoadDistrictAsync();
        DistrictItems = districts.Select(b => new SelectedItem(b.distid.ToString(), b.distname));
        // DistrictItems = districts.Select(b => b.distname);

        var branches = await _service3.LoadBranchAsync();
        BranchItems = branches.Select(b => new SelectedItem(b.branchid.ToString(), b.branchname));
        // BranchItems = branches.Select(b => b.branchname);

        StateHasChanged();
    }

    private async Task ShowAddModal(IEnumerable<Courier> items)
    {
        selectedCourier = new Courier();
        modalTitle = "Create New Courier Data";
        isModalOpen = true;

        modals.Show();
    }

    private async Task ShowEditModal(Courier courier)
    {
        selectedCourier = new Courier
            {
                nip = courier.nip,
                couriername = courier.couriername,
                couriercode = courier.couriercode,
                branchid = courier.branchid,
                phone = courier.phone
            };

        modalTitle = "Update Courier Data";
        // isModalOpen = true;
        // modals.Show();
    }

    private async Task<bool> SaveCourier()
    {
        bool result;
        if (couriers.Any(c => c.nip == selectedCourier.nip))
        {
            result = await _service2.UpdateCourierAsync(selectedCourier);
        }
        else
        {
            result = await _service2.CreateCourierAsync(selectedCourier);
        }

        if (result)
        {
            isModalOpen = false;
            await LoadData();
            StateHasChanged();
        }

        return result;
    }

    private async Task<bool> DeleteCourier(IEnumerable<Courier> couriers)
    {
        bool result = await _service2.DeleteCourierAsync(couriers);
        if (result)
        {
            await LoadData();
            StateHasChanged();
        }

        return result;
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private async Task AddNew()
    {
        mode = "input";
        IsTable = false;
        titlePage = "Create Data";
        data = new();
    }

    private async Task RefreshTable()
    {
        couriers = await _service2.GetCourierAsync();
        IsTable = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateByID(string id)
    {
        data = await _service2.GetCourierByIDAsync(id);
        if (data != null)
        {
            mode = "edit";
            IsTable = false;
            titlePage = "Update Data";
        }
    }

    private async Task RemoveByID(string id)
    {
        bool result = await _service2.DeleteCourierByIDAsync(id);
        if (result)
        {
            await RefreshTable();

            await ToastService.Success("Success", "Selected data was successfully deleted");
           
        }
        else
        {
            await ToastService.Error("Failed", "an error occurred while deleting data");
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        bool result = mode == "input"
           ? await _service2.CreateCourierAsync(data)
           : await _service2.UpdateCourierAsync(data);
        if (result)
        {
            await RefreshTable();

            if (mode == "input"){
                resultString = "Data successfully added";
            }else{
                resultString = "Data successfully upadated";
            }

            await ToastService.Success("Success", resultString);
        }
        else
        {
            await ToastService.Error("Failed", "an error occurred while saving data");
        }
    }

    private async Task OnInvalidSubmit(EditContext context)
    {

    }

    private async Task Cancel()
    {
        IsTable = true;
    }
}

