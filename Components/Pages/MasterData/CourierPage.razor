@page "/master/courier"
@using iDss.X.Models
@inject iDss.X.Services.MasterDataServices _services
@attribute [TabItemOption(Text = "Couier Code")]

<PageTitle>Courier Page</PageTitle>

@if (couriers != null){
    <Row  ItemsPerRow="ItemsPerRow.One">
        <Row ItemsPerRow="ItemsPerRow.Two">
            <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
                <StackItem>
                    <h5>Courier Code</h5>
                </StackItem>
            </Stack> 
        </Row>
        <Table Items="couriers" IsPagination="true" PageItemsSource="@_services.PageItemsSource" IsFixedHeader="true"
        IsStriped="true" IsBordered="true" ShowToolbar="true" AutoGenerateColumns="false" ShowSearch="true" ShowExtendButtons="true"
        EditMode="EditMode.Popup" EditDialogSize="Size.ExtraLarge" ShowEditButton="false" ShowAddButton="false">
            <TableToolbarTemplate>
                <TableToolbarButton TItem="Courier"
                Color="Color.Primary"
                Icon="fa-solid fa-plus"
                Text="Add"
                IsAsync OnClickCallback="@ShowAddModal" />
            </TableToolbarTemplate>
            <TableColumns>
                <TableColumn @bind-Field="@context.nip" Searchable="true" Filterable="true"/>
                <TableColumn @bind-Field="@context.couriercode" Searchable="true" Filterable="true" />
                <TableColumn @bind-Field="@context.couriername" Searchable="true" Filterable="true" />
                <TableColumn @bind-Field="@context.Branch" Text="Branch Name">
                    <Template Context="x">
                        @{
                            var br = x.Row.Branch.branchname;
                            <p>@br</p>
                        }
                    </Template>
                </TableColumn>   
                <TableColumn @bind-Field="@context.createddate" IsVisibleWhenAdd="false" IsVisibleWhenEdit="false" />
            </TableColumns>
        </Table>
    </Row>

}else{
    <h5>Loading . . .</h5>
}

<Modal @ref="modals">
    <ModalDialog Size="Size.Small" ShowResize="true" Title="Test"
                 ShowSaveButton="true">
        <BodyTemplate>
            <div class="row g-3">
                <div class="col-12 col-sm-6">
                    <BootstrapInput PlaceHolder="enter module id ..."
                                    TValue="int"
                                    IsAutoFocus="true"
                                    IsSelectAllTextOnFocus="true"
                                    ShowLabel="true"
                                    DisplayText="Module ID"/>
                </div>
            </div>
            <div class="row g-3">
                <div class="col-12 col-sm-6">
                    <BootstrapInput PlaceHolder="enter module name ..."
                                    TValue="string"
                                    IsAutoFocus="true"
                                    IsSelectAllTextOnFocus="true"
                                    ShowLabel="true"
                                    DisplayText="Module Name" />
                </div>
            </div>
            <div class="row g-3">
                <div class="col-12 col-sm-6">
                    <Textarea PlaceHolder="enter description ..."
                              rows="4"
                              TValue="string"
                              IsAutoFocus="true"
                              IsSelectAllTextOnFocus="true"
                              ShowLabel="true"
                              DisplayText="Description" />
                </div>
            </div>
        </BodyTemplate>
    </ModalDialog>
</Modal>

@code {
    Modal modals;
    public List<Courier> couriers = new();
    // private List<Branch> branches = new();
    private IEnumerable<SelectedItem>? DistrictItems { get; set; }
    private IEnumerable<String>? BranchItems { get; set; }

    private bool isModalOpen = false;
    private string modalTitle = "Add Courier";
    private Courier selectedCourier = new();

    // private IEnumerable<Courier>? Items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        couriers = await _services.GetCourierAsync();


        // var districts = await _services.LoadDistrictAsync();
        // DistrictItems = districts.Select(b => new SelectedItem(b.distid.ToString(), b.distname));

        // var branches = await _services.LoadBranchAsync();
        // BranchItems = branches.Select(b => b.branchname);

    }

    private async Task ShowAddModal(IEnumerable<Courier> items)
    {
        selectedCourier = new Courier();
        modalTitle = "Create New Courier Data";
        isModalOpen = true;

        modals.Show();
    }

    private void ShowEditModal(Courier courier)
    {
        selectedCourier = new Courier
            {
                nip = courier.nip,
                couriername = courier.couriername,
                couriercode = courier.couriercode,
                branchid = courier.branchid,
                phone = courier.phone
            };
        modalTitle = "Update Courier Data";
        isModalOpen = true;
    }

    private async Task SaveCourier()
    {
        bool result;
        if (couriers.Any(c => c.nip == selectedCourier.nip))
        {
            result = await _services.UpdateCourierAsync(selectedCourier);
        }
        else
        {
            result = await _services.CreateCourierAsync(selectedCourier);
        }

        if (result)
        {
            isModalOpen = false;
            await LoadData();
        }
    }

    // private async Task DeleteCourier(Courier courier)
    // {
    //     bool result = await _services.DeleteCourierAsync(courier.nip);
    //     if (result)
    //     {
    //         await LoadData();
    //     }
    // }

    private void CloseModal()
    {
        isModalOpen = false;
    }
}

