@page "/pickup/assigncourier"
@using iDss.X.Models
@using AutoMapper;
@inject ToastService _toastService;
@inject MasterDataPart1Service _service1
@inject MasterDataPart2Service _service2
@inject MasterDataPart3Service _service3
@inject PickupService _pickupService
@inject IMapper Mapper;
@attribute [TabItemOption(Text = "Create Assign Courier")]

<PageTitle>Create Assign Courier</PageTitle>

<Block OnQueryCondition="OnQueryCondition" Name="Table">
    @if (pickupRequests != null)
    {
        <Row ItemsPerRow="ItemsPerRow.One">
            <Table TItem="PickupRequest" IsPagination="true" PageItemsSource="@_pickupService.PageItemsSource" OnQueryAsync="@_pickupService.OnQueryPickupRequestAsync"
            IsFixedHeader="true" ShowLoading="true" IsStriped="true" IsBordered="true" ShowToolbar="true" AutoGenerateColumns="false" ShowSearch="true" ShowExtendButtons="false"
            ShowEditButton="false" ShowAddButton="false" ShowDeleteButton="false" IsAutoRefresh AutoRefreshInterval="1000"
            OnDeleteAsync="@_pickupService.DeletePickupRequestByIDAsync" DeleteButtonText="">
                <TableToolbarTemplate>
                    <TableToolbarButton TItem="PickupRequest"
                    Color="Color.Success"
                    Icon="fa-solid fa-plus"
                    Text="Assign All" />
                    <TableToolbarButton TItem="PickupRequest"
                    Color="Color.Danger"
                    Icon="fa-solid fa-plus"
                    Text="Reassign All" />
                </TableToolbarTemplate>
                <TableColumns>
                    <TableColumn @bind-Field="@context.pickupno" Width="80" Fixed="true" Text="Assign">
                        <Template Context="item">
                            <div class="d-grip gap-2 d-md-block">
                                <Button Text="" OnClick="@(() => AssignModal(item.Row.pickupno))" 
                                IsDisabled="@IsAssigned(item.Row.pickupno)" 
                                Color="Color.Success" >AGN</Button>
                            </div>
                        </Template>
                    </TableColumn>
                    <TableColumn @bind-Field="@context.pickupno" Width="80" Fixed="true" Text="Reassign">
                        <Template Context="item">
                            <div class="d-grip gap-2 d-md-block">
                                <PopConfirmButton Content="Are you sure you want to Reassign the data?"
                                IsDisabled="@IsReAssigned(item.Row.pickupno)"
                                Text="" OnConfirm="@(() => ReAssign(item.Row.pickupno))" 
                                Color="Color.Danger" >RGN</PopConfirmButton>
                            </div>
                        </Template>
                    </TableColumn>
                    <TableColumn @bind-Field="@context.pickupno" Width="110" Fixed="true" Text="PU Number"> 
                        <Template Context="item">
                            <LinkButton OnClick="@(() => DetailModalShow(item.Row.pickupno))">@item.Row.pickupno</LinkButton>
                        </Template>
                    </TableColumn>
                    <TableColumn @bind-Field="@context.acctname" Width="130" Text="Customer Name" Searchable="true" />
                    <TableColumn @bind-Field="@context.addr" Width="200" Text="Pickup Address" Searchable="true" />
                    <TableColumn @bind-Field="@context.pickuptype" Width="100" Text="Pickup Type" Searchable="true" />
                    <TableColumn @bind-Field="@context.pickuptype" Width="110" Text="Pickup Status">
                        <Template Context="item">
                            @if (pickupStatuses.TryGetValue(item.Row.pickupno, out var status))
                            {
                                @status
                            }
                        </Template>
                    </TableColumn>
                    <TableColumn @bind-Field="@context.pickupdate" Width="120" Text="Request Date" Searchable="true" />
                    <TableColumn @bind-Field="@context.timefrom" Width="100" Text="PU Time">
                        <Template Context="item">
                            @{
                                string waktu = pickupTimeRanges.ContainsKey(item.Row.pickupno)
                            ? pickupTimeRanges[item.Row.pickupno]
                            : "Unknown";
                            }
                            @waktu
                        </Template>
                    </TableColumn>
                    <TableColumn @bind-Field="@context.branchname" Width="150" Text="Branch" />
                    <TableColumn @bind-Field="@context.couriername" Width="120" Text="Courier Name" Searchable="true" />
                    <TableColumn @bind-Field="@context.phone" Width="100" Text="Phone" Searchable="true" />
                    <TableColumn @bind-Field="@context.modifier" Width="100" Text="Update By" Searchable="true" />
                </TableColumns>
            </Table>
        </Row>
    }
    else
    {
        <h5>Loading . . .</h5>
    }
</Block>

<Modal @ref="ModalAssign">
    <ValidateForm Model="dataRequest">
        <ModalDialog Title="@modalTitle" Size="Size.Medium" ShowSaveButton="true" OnSaveAsync="@Assign">
            <BodyTemplate>
                <Row RowType="RowType.Inline">
                    <Display TValue="string" Value="@dataRequest.pickupno" DisplayText="Pickup Number" ShowLabel="true" />
                    <Display TValue="string" Value="@dataRequest.branchname" DisplayText="Branch" ShowLabel="true" />
                    <Select TValue="string" Items="@CourierItems" @bind-Value="@dataRequest.couriercode"  DisplayText="Courier" ShowLabel="true" />
                </Row>
            </BodyTemplate>
        </ModalDialog>
    </ValidateForm>
</Modal>

<Modal @ref="DetailModal">
    <ValidateForm Model="dataRequest">
        <ModalDialog Title="@modalTitle" >
            <BodyTemplate>
                <Row >
                    <div class="row">
                        <div class="col-6">
                            <Card>
                                <HeaderTemplate>
                                    Detail Pickup
                                </HeaderTemplate>
                                <BodyTemplate>
                                    <Row RowType="RowType.Inline">
                                        <div style="display: flex; flex-direction: column; gap: 20px;">
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Pickup Type</strong></div>
                                                <div>: @dataRequest.pickuptype</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Pickup Point</strong></div>
                                                <div>: @dataRequest.pickuppoint</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Latitude</strong></div>
                                                <div>: @dataRequest.latitude</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Longitude</strong></div>
                                                <div>: @dataRequest.longitude</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Branch Name</strong></div>
                                                <div>: @dataRequest.branchname</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Courier Name</strong></div>
                                                <div>: @dataRequest.couriername</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Transport Type</strong></div>
                                                <div>: @dataRequest.transporttype</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Pickup Date</strong></div>
                                                <div>: @dataRequest.pickupdate.ToString("yyyy-MM-dd")</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Time From</strong></div>
                                                <div>: @dataRequest.timefrom.ToString("hh\\:mm")</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Time To</strong></div>
                                                <div>: @dataRequest.timeto.ToString("hh\\:mm")</div>
                                            </div>
                                        </div>
                                    </Row>
                                </BodyTemplate>
                            </Card>
                        </div>
                        <div class="col-6">
                            <Card>
                                <HeaderTemplate>
                                    From Account (Shipper)
                                </HeaderTemplate>
                                <BodyTemplate>
                                    <Row RowType="RowType.Inline">
                                        <div style="display: flex; flex-direction: column; gap: 31px;">
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Account</strong></div>
                                                <div>: @dataRequest.acctname</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Pic Name</strong></div>
                                                <div>: @dataRequest.picname</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Phone</strong></div>
                                                <div>: @dataRequest.phone</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Email</strong></div>
                                                <div>: @dataRequest.email</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Post Code</strong></div>
                                                <div>: @dataRequest.postcode</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Address</strong></div>
                                                <div>: @dataRequest.addr</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>District</strong></div>
                                                <div>: @DistrictName</div>
                                            </div>
                                            <div style="display: flex;">
                                                <div style="width: 120px;"><strong>Notes</strong></div>
                                                <div>: @dataRequest.notes</div>
                                            </div>
                                        </div>
                                    </Row>
                                </BodyTemplate>
                            </Card>
                        </div>
                    </div>
                </Row>
            </BodyTemplate>
        </ModalDialog>
    </ValidateForm>
</Modal>

@code {
    Modal ModalAssign;
    Modal DetailModal;
    private string modalTitle;
    private bool IsTable { get; set; } = true;
    public List<PickupRequest> pickupRequests = new();
    public List<PickupStatusPool> pickupStatusPools = new();
    public PickupRequest dataRequest = new();
    public PickupStatusPool dataStatus = new();
    private IEnumerable<SelectedItem>? CourierItems;
    private string DistrictName;
    private Dictionary<string, string> pickupStatuses = new();
    private Dictionary<string, string> pickupTimeRanges = new();

    private string WaktuRange(TimeOnly from, TimeOnly to)
    {
        return $"{from:HH\\:mm} - {to:HH\\:mm}";
    }

    private Task<bool> OnQueryCondition(string name) => Task.FromResult(IsTable);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        pickupRequests = await _pickupService.GetPickupRequestAsync();
        pickupStatusPools = await _pickupService.GetPickupStatusPoolAsync();

        var couriers = await _service2.GetCourierComboAsync();
        CourierItems = new List<SelectedItem>
        {
            new SelectedItem(string.Empty, "Please select")
        }.Concat(couriers.Select(b => new SelectedItem(b.couriercode, b.couriername)));

        pickupTimeRanges = pickupRequests
        .GroupBy(x => x.pickupno)
        .ToDictionary(
            g => g.Key,
            g => WaktuRange(g.First().timefrom, g.First().timeto)
        );

        pickupStatuses = pickupStatusPools
            .GroupBy(x => x.pickupno)
            .ToDictionary(g => g.Key, 
                          g => g.Where(x => x.flag == 1).FirstOrDefault()?.pickupstatus ?? "Unknown");
        StateHasChanged();
    }

    private bool IsAssigned(string pickupno)
    {
        if (pickupStatuses.TryGetValue(pickupno, out var status))
        {
            return status?.Trim().ToLower() == "assign";
        }
        return false;
    }

    private bool IsReAssigned(string pickupno)
    {
        if (pickupStatuses.TryGetValue(pickupno, out var status))
        {
            var normalizedStatus = status?.Trim().ToLower();
            if (normalizedStatus == "reassign")
            {
                return normalizedStatus == "reassign";
            }
            else if (normalizedStatus == "open")
            {
                return normalizedStatus == "open";
            }
        }
        return false;
    }

    private async void AssignModal(string pickupNoo)
    {
        dataRequest = new PickupRequest();
        var dataRequests = await _pickupService.GetPickupRequestByPickno(pickupNoo);
        modalTitle = "Assign Courier";
        dataRequest.pickupno = dataRequests.pickupno;
        dataRequest.branchname = dataRequests.branchname;
        ModalAssign.Show();
        StateHasChanged();
    }

    private async void DetailModalShow(string pickupNoo)
    {
        var dataRequests = await _pickupService.GetPickupRequestByPickno(pickupNoo);
        modalTitle = "Detail Pickup";
        dataRequest = Mapper.Map<PickupRequest>(dataRequests);
        var districts = await _service1.GetDistrictByDistrictId(dataRequest.distid);
        DistrictName = districts.distname;

        DetailModal.Show();
        StateHasChanged();
    }

    private async Task<bool> Assign()
    {
        bool result;
        if (pickupRequests.Any(c => c.pickupno == dataRequest.pickupno))
        {
            var courierNamee = await _service2.GetCourierByCodeAsync(dataRequest.couriercode);
            
            if (courierNamee == null)
            {
                await _toastService.Error("Error", "Please Select Courier");
                return false;
            }
            else
            {
                dataRequest.couriername = courierNamee.couriername;
                var updateStatus = await _pickupService.UpdatePickupStatusAsync(dataRequest, ItemChangedType.Update);
                if (updateStatus == true)
                {
                    result = await _pickupService.AssignCourierAsync(dataRequest, ItemChangedType.Add);
                    if (result != true)
                    {
                        await _toastService.Error("Error", "Failed assign");
                        return false;
                    }
                    else
                    {
                        await _toastService.Success("Success", "Assign Courier");
                        await ModalAssign.Close();
                        await LoadData();
                        await InvokeAsync(StateHasChanged);
                        return true;
                    }
                }
            }
            
        }
        return false;
    }

    private async Task ReAssign(string pickupNoo)
    {
        bool result;
        if (pickupRequests.Any(c => c.pickupno == pickupNoo))
        {
            result = await _pickupService.ReassignPickupStatusAsync(dataRequest,pickupNoo, ItemChangedType.Update);
            if (result != true)
            {
                await _toastService.Error("Error", "Failed Reassign");
                return;
            }
            else
            {
                await _toastService.Success("Success", "Reassign Courier");
                ModalAssign.Close();
                await LoadData();
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}
