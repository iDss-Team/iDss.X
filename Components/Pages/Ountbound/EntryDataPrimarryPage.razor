@page "/ocl/entrydataprimary"
@using System.Text
@using iDss.X.Models
@using iDss.X.Models.Dto

@inject MasterDataPart1Service _service1
@inject MasterDataPart2Service _service2
@inject MasterDataPart3Service _service3
@inject OutboundService _oclservice
@inject ToastService toastService
@attribute [TabItemOption(Text = "Entry Data Primary")]

<Block OnQueryCondition="OnQueryCondition">
    <ValidateForm Model="entryData" @key="entryData" OnValidSubmit="HandleValidSubmit">
        <div class="container-fluid">
            <div class="row g-3">
                <div class="col-md-12 mb-4">
                    <Card>
                        <BodyTemplate>
                            <Row ItemsPerRow="ItemsPerRow.Four">
                                <Row RowType="RowType.Normal">
                                    <BootstrapInput TValue="string" @bind-Value="entryData.awb" DisplayText="eConnote/AWB" PlaceHolder="Auto Generated" Readonly="true" ShowLabel="true" />
                                </Row>

                                <Row RowType="RowType.Normal">
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipment.refno" DisplayText="Ref No" Readonly="true" ShowLabel="true" />
                                </Row>

                                <Row RowType="RowType.Normal">
                                    <Select TValue="int" @bind-Value="entryData.Shipper.branchid" Items="branchItems" DisplayText="Branch" ShowLabel="true" ShowSearch />
                                </Row>

                                <Row RowType="RowType.Normal">
                                    <BootstrapInput TValue="int" Value="availableAWBCount" IsAutoFocus="true" Readonly="true" IsSelectAllTextOnFocus="true" ShowLabel="true" DisplayText="Available AWB" />
                                </Row>
                            </Row>
                        </BodyTemplate>
                    </Card>
                </div>

                <div class="col-md-6">
                    <Card IsCollapsible="false" HeaderText="Shipper">
                        <BodyTemplate>
                            <Row ItemsPerRow="ItemsPerRow.Two">
                                <Row RowType="RowType.Normal">
                                    <AutoFill TValue="string" Items="accountList" @bind-Value="entryData.Shipper.acctno" OnSelectedItemChanged="OnAccountSelected" DisplayText="Account No" NoDataTip=""></AutoFill>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipper.shippername" DisplayText="Nama" ShowLabel="true" Readonly="true"/>
                                    <Textarea DisplayText="Street/Jalan" @bind-Value="entryData.Shipper.addr1" PlaceHolder="Address 1" rows="2" ShowLabel="true" />
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipper.addr2" ShowLabel="false" PlaceHolder="Address 2" />
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipper.addr3"  ShowLabel="false" PlaceHolder="Address 3" />
                                    <BootstrapInput TValue="string" Value="entryData.districtName" ShowLabel="true" DisplayText="Kecamatan" Readonly="true" />
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipper.cityname" ShowLabel="true" DisplayText="Kota/Kabupaten" Readonly="true"/>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipper.provname" ShowLabel="true" DisplayText="Provinsi" Readonly="true"/>
                                    @* <Select TValue="string" @bind-Value="entryData.Shipper.distid" Items="districtItems" DisplayText="Kecamatan" ShowLabel="true" ShowSearch /> *@
                                    @* <Select TValue="string" @bind-Value="entryData.Shipper.cityname" Items="cityItems" DisplayText="Kota/Kabupaten" ShowLabel="true" ShowSearch /> *@
                                    @* <Select TValue="string" @bind-Value="entryData.Shipper.provname" Items="provinceItems" DisplayText="Provinsi" ShowLabel="true" ShowSearch /> *@
                                </Row>

                                <Row RowType="RowType.Normal">
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipper.postcode" DisplayText="Post Code" ShowLabel="true" />
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipper.phone" DisplayText="Phone" ShowLabel="true" Readonly="true"/>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipper.email" DisplayText="Email" ShowLabel="true"/>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipper.attname" DisplayText="Shipper Attn" ShowLabel="true" ShowRequired="true"/>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipper.oricode" DisplayText="Origin Code" ShowLabel="true"/>
                                    <span class="origin-code">Origin</span>
                                </Row>
                            </Row>
                        </BodyTemplate>
                    </Card>

                    <Card class="mt-3" IsCollapsible="false" HeaderText="Consignee">
                        <HeaderTemplate>
                            <div class="flex-fill">
                            </div>
                            <span class="icon-refresh" @onclick="ResetConsignee">
                                <i class="fa-solid fa-arrows-rotate"></i>
                            </span>
                        </HeaderTemplate>
                        <BodyTemplate>
                            <Row ItemsPerRow="ItemsPerRow.Two">
                                <Row RowType="RowType.Normal">
                                    @* <BootstrapInput TValue="string" @bind-Value="entryData.Consignee.acctno" DisplayText="Account No" ShowLabel="true" /> *@
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Consignee.cnename" DisplayText="Nama" ShowLabel="true" />
                                    <Textarea rows="2" DisplayText="Street/Jalan" @bind-Value="entryData.Consignee.addr1" PlaceHolder="Address 1" ShowLabel="true" />
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Consignee.addr2" ShowLabel="false" PlaceHolder="Address 2"/>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Consignee.addr3" ShowLabel="false" PlaceHolder="Address 3"/>
                                    <Select TValue="string" @bind-Value="entryData.Consignee.distid" Items="districtItems" DisplayText="Kecamatan" ShowLabel="true" ShowSearch/>
                                    <Select TValue="string" @bind-Value="entryData.Consignee.cityname" Items="cityItems" DisplayText="Kota/Kabupaten" ShowLabel="true" ShowSearch/> 
                                </Row>
                                <Row RowType="RowType.Normal">
                                    <Select TValue="string" @bind-Value="entryData.Consignee.provname" Items="provinceItems" DisplayText="Provinsi" ShowLabel="true" ShowSearch />
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Consignee.postcode" DisplayText="Post Code" ShowLabel="true" />
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Consignee.phone" DisplayText="Phone" ShowLabel="true"/>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Consignee.email" DisplayText="Email" ShowLabel="true"/>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Consignee.attname" DisplayText="Consignee Attn" ShowLabel="true" ShowRequired="true"/>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Consignee.descode" DisplayText="Destination Code" ShowLabel="true"/>
                                </Row>
                            </Row>

                        </BodyTemplate>
                    </Card>
                </div>

                <div class="col-md-6">
                    <Card IsCollapsible="false" HeaderText="Shipment Detail">
                        <HeaderTemplate>
                            <div class="flex-fill">
                            </div>
                            <span class="icon-refresh" @onclick="ResetShipmentDetail">
                                <i class="fa-solid fa-arrows-rotate"></i>
                            </span>
                        </HeaderTemplate>
                        <BodyTemplate>
                            <Row ItemsPerRow="ItemsPerRow.Two">
                                <Row RowType="RowType.Normal">
                                    <DateTimePicker @bind-Value="PickupDate" DisplayText="Pick Up Date" ShowLabel="true" />
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipment.donumber" DisplayText="DO Number" ShowLabel="true"/>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipment.buyerorderno" DisplayText="Buyer Order No" ShowLabel="true" />
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipment.pickupno" DisplayText="No Resi" ShowLabel="true"/>
                                    <Select TValue="string" @bind-Value="entryData.Shipment.deliveryitem" Items="deliveryItemOptions" DisplayText="Delivery Item" ShowLabel="true"/>
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipment.content" DisplayText="Content" ShowLabel="true"/>
                                    <BootstrapInput TValue="decimal?" @bind-Value="entryData.Shipment.itemvalue" DisplayText="Item Value" ShowLabel="true"/>
                                    <Select TValue="string" @bind-Value="entryData.Shipment.service" Items="servicetypeItemOptions" DisplayText="Service Type" ShowLabel="true"/>                                       
                                </Row>

                                <Row RowType="RowType.Normal">
                                    <Select TValue="string" @bind-Value="entryData.Shipment.linehaul" OnSelectedItemChanged="OnLinehaulChanged" Items="linehaulItemOptions" DisplayText="Line Haul" ShowLabel="true" />
                                    <BootstrapInput TValue="string" @bind-Value="entryData.Shipment.hubcode" DisplayText="Hub Code" ShowLabel="true" />

                                    <BootstrapInputGroupLabel DisplayText="Pieces" ShowRequiredMark="true" />
                                    <BootstrapInputGroup>
                                        <BootstrapInput TValue="int" @bind-Value="entryData.Shipment.pieces" />                                               
                                        <BootstrapInputGroupLabel DisplayText="Pcs" Width="45"/>
                                    </BootstrapInputGroup>               
                                    
                                    <BootstrapInputGroupLabel DisplayText="Actual Weight" ShowRequiredMark="true" />
                                    <BootstrapInputGroup>
                                        <BootstrapInput TValue="decimal" @bind-Value="entryData.Shipment.actweight" OnValueChanged="OnActWeightChanged" />
                                        <Dropdown TValue="string" @bind-Value="entryData.Shipment.unitweight" Items="unitWeightOptions" Color="Color.Secondary" />
                                    </BootstrapInputGroup>                                   

                                    <BootstrapInputGroupLabel DisplayText="Volume Weight"/>
                                    <BootstrapInputGroup>
                                        <BootstrapInput TValue="decimal?" @bind-Value="entryData.VolWeight.Length" ShowLabel="false" class="custom-vol-weight" PlaceHolder="Length" UseInputEvent="true" OnValueChanged="OnLengthChanged" />
                                        <BootstrapInput TValue="decimal?" @bind-Value="entryData.VolWeight.Width" ShowLabel="false" class="custom-vol-weight" PlaceHolder="Width" UseInputEvent="true" OnValueChanged="OnWidthChanged" />
                                        <BootstrapInput TValue="decimal?" @bind-Value="entryData.VolWeight.Height" ShowLabel="false" class="custom-vol-weight" PlaceHolder="Height" UseInputEvent="true" OnValueChanged="OnHeightChanged" />
                                        <BootstrapInputGroupLabel DisplayText="Cm" Width="45"/>
                                    </BootstrapInputGroup>

                                    <BootstrapInput TValue="decimal" @bind-Value="entryData.Shipment.volweight" ShowLabel="false" Readonly="true" />

                                    <BootstrapInputGroupLabel DisplayText="Charge Weight" ShowRequiredMark="true" style="margin-top:30px;"/>
                                    <BootstrapInputGroup>
                                        <BootstrapInput TValue="decimal" @bind-Value="entryData.Shipment.chargeweight" Readonly="true" />
                                        <Dropdown TValue="string" Value="entryData.Shipment.unitweight" Items="unitWeightOptions" Color="Color.Secondary" IsDisabled="true" />                                       
                                    </BootstrapInputGroup>

                                    <Textarea rows="2" DisplayText="Notes" @bind-Value="entryData.Shipment.intruction" ShowLabel="true" />
                                </Row>
                            </Row>

                        </BodyTemplate>
                    </Card>

                    <Card class="mt-3" IsCollapsible="false" HeaderText="Additional Entry">
                        <HeaderTemplate>
                            <div class="flex-fill">
                            </div>
                            <span class="icon-refresh">
                                <i class="fa-solid fa-arrows-rotate"></i>
                            </span>
                        </HeaderTemplate>
                        <BodyTemplate>
                            <Row ItemsPerRow="ItemsPerRow.Three" RowType="RowType.Inline">
                                <Checkbox TValue="bool" State="packingState" StateChanged="OnPackingStateChanged" DisplayText="Packing" ShowLabel="true" Size="Size.Small" ShowRequired="true" />
                                <BootstrapInputGroup>
                                    <Select TValue="string" @bind-Value="entryData.Shipment.packingtype" Items="packingTypeOptions" IsDisabled="!isPacking" ShowLabel="false" Class="custom-select-size" />
                                    <Select TValue="string" Items="packingSizeOptions" IsDisabled="!isPacking" ShowLabel="false" Class="custom-select-size" />
                                </BootstrapInputGroup>                            
                            </Row>

                            <Row RowType="RowType.Inline" ItemsPerRow="ItemsPerRow.Three" style="margin-top: 10px">
                                <Checkbox TValue="bool" DisplayText="Insurance" ShowLabel="true" Size="Size.Small"/>
                                <BootstrapInput TValue="int" @bind-Value="entryData.Shipment.isinsurance" ShowLabel="false" />                               
                            </Row>
                            
                            <Row RowType="RowType.Inline" ItemsPerRow="ItemsPerRow.Three" style="margin-top: 10px">
                                <Checkbox TValue="bool" DisplayText="Voucher Code" ShowLabel="true" Size="Size.Small" />
                                <BootstrapInput TValue="string" @bind-Value="entryData.Shipment.vouchercode" ShowLabel="false" />
                            </Row>
                        </BodyTemplate>
                    </Card>
                    
                    @* <Card class="mt-3" IsCollapsible="false" HeaderText="Price">
                        <HeaderTemplate>
                            <div class="flex-fill">
                            </div>
                            <span class="icon-refresh">
                                <i class="fa-solid fa-arrows-rotate"></i>
                            </span>
                        </HeaderTemplate>
                        <BodyTemplate>
                            <Row ItemsPerRow="ItemsPerRow.Three" RowType="RowType.Inline">
                                <Checkbox TValue="bool" State="packingState" StateChanged="OnPackingStateChanged" DisplayText="Packing" ShowLabel="true" Size="Size.Small" ShowRequired="true" />
                                <BootstrapInputGroup>
                                    <Select TValue="string" @bind-Value="entryData.Shipment.packingtype" Items="packingTypeOptions" IsDisabled="!isPacking" ShowLabel="false" Class="custom-select-size" />
                                    <Select TValue="string" Items="packingSizeOptions" IsDisabled="!isPacking" ShowLabel="false" Class="custom-select-size" />
                                </BootstrapInputGroup>                            
                            </Row>

                            <Row RowType="RowType.Inline" ItemsPerRow="ItemsPerRow.Three" style="margin-top: 10px">
                                <Checkbox TValue="bool" DisplayText="Insurance" ShowLabel="true" Size="Size.Small"/>
                                <BootstrapInput TValue="int" @bind-Value="entryData.Shipment.isinsurance" ShowLabel="false" />                               
                            </Row>
                            
                            <Row RowType="RowType.Inline" ItemsPerRow="ItemsPerRow.Three" style="margin-top: 10px">
                                <Checkbox TValue="bool" DisplayText="Voucher Code" ShowLabel="true" Size="Size.Small" />
                                <BootstrapInput TValue="string" @bind-Value="entryData.Shipment.vouchercode" ShowLabel="false" />
                            </Row>
                        </BodyTemplate>
                    </Card> *@
                </div>      
            </div>

            <Stack Justify="StackJustifyContent.Center" class="mt-3" IsRow="true">
                <div class="btn-group" role="group">
                    <Button ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Success" Icon="fa-solid fa-floppy-disk" Text="Save" />
                    <Button ButtonType="ButtonType.Button" OnClick="ViewData" Size="Size.Small" Color="Color.Primary" Icon="fa-solid fa-eye" Text="View Data" />
                    <Button ButtonType="ButtonType.Reset" OnClick="ResetAll" Size="Size.Small" Color="Color.Danger" Icon="fa-solid fa-arrows-rotate me-2" Text="Reset All" />
                </div>
            </Stack>

        </div>
        </ValidateForm>
</Block>

<Block OnQueryCondition="OnQueryCondition2">
    <Card>
        <HeaderTemplate>
            Entry Recap
        </HeaderTemplate>
        <BodyTemplate>
            <Table TItem="CombinedTransactionDto" Items="@CombinedList" IsBordered="true" ShowLineNo="true" IsStriped="true" ShowEmpty="true" EmptyText="Tidak Ada Transaksi">
                <TableColumns>
                    <TableColumn @bind-field="@context.AWB" Text="AWB" Width="100"/>
                    <TableColumn @bind-field="@context.PickupDate" Text="Pickup Date" />
                    <TableColumn @bind-field="@context.ShipperName" Text="Shipper Name" />
                    <TableColumn @bind-field="@context.ShipperAddress" Text="Shipper Address" />
                    <TableColumn @bind-field="@context.ConsigneeName" Text="Consignee Name" />
                    <TableColumn @bind-field="@context.ConsigneeAddress" Text="Consignee Address" />
                    <TableColumn @bind-field="@context.Destination" Text="Destination" />
                    <TableColumn @bind-field="@context.ServiceType" Text="Service Type" />
                    <TableColumn @bind-field="@context.Pieces" Text="Pieces" />
                    <TableColumn @bind-field="@context.ActualWeight" Text="Actual Weight" />
                    <TableColumn @bind-field="@context.ChargeWeight" Text="Charge Weight" />
                    <TableColumn @bind-field="@context.PackingType" Text="Packing Type" />
                </TableColumns>
            </Table>
        </BodyTemplate>
    </Card>


    <Stack Justify="StackJustifyContent.Center" class="mt-3" IsRow="true">
        <Button ButtonType="ButtonType.Button" OnClick="BackToForm" Size="Size.Small" Color="Color.Warning" Icon="fa-solid fa-arrow-left" Text="Back to Form" />
    </Stack>
</Block>


@code {

    #region Fields and Properties

    // State Control
    private bool isViewClicked = false;
    private bool isPacking = false;
    private CheckboxState packingState = CheckboxState.UnChecked;

    // Main DTO
    private EntryDataPrimaryDto entryData = new();

    // Output List
    private List<CombinedTransactionDto> CombinedList { get; set; } = new(); private List<SelectedItem> cityItems = new();
    private int availableAWBCount;

    // Lookup data - area/cabang
    private List<SelectedItem> districtItems = new();
    private List<SelectedItem> provinceItems = new();
    private List<SelectedItem> branchItems = new();
    private List<District> districtList = new();

    // Lookup data - packing
    private List<SelectedItem> packingTypeOptions = new();
    private List<SelectedItem> packingSizeOptions = new();
    private List<SelectedItem> unitWeightOptions = new();

    // Lookup data - service
    private List<SelectedItem> deliveryItemOptions = new();
    private List<SelectedItem> servicetypeItemOptions = new();
    private List<SelectedItem> linehaulItemOptions = new();

    // Lookup data - account
    private List<string> accountList = new();

    // Computed property
    private DateTime PickupDate
    {
        get => entryData.Shipment.pickupdate.ToDateTime(TimeOnly.MinValue);
        set => entryData.Shipment.pickupdate = DateOnly.FromDateTime(value);
    }

    #endregion Fields and Properties

    #region Lifecycle Methods

    protected override async Task OnInitializedAsync()
    {
        await LoadMasterDataAsync();
        LoadStaticOptions();
    }

    #endregion

    #region Data Loading

    private async Task LoadMasterDataAsync()
    {
        var accounts = await _service1.GetAllAccountAsync();
        accountList = accounts
            .Where(a => !string.IsNullOrEmpty(a.acctno))
            .Select(a => a.acctno!)
            .Distinct()
            .ToList();

        cityItems = await _oclservice.GetCityDropdownItemsAsync();
        districtItems = await _oclservice.GetDistrictDropdownItemsAsync();
        provinceItems = await _oclservice.GetProvinceDropdownItemsAsync();
        branchItems = await _oclservice.GetBranchDropdownItemsAsync();
        packingTypeOptions = await _oclservice.GetPackingTypeDropdownItemsAsync();
        packingSizeOptions = await _oclservice.GetPackingSizeDropdownItemsAsync();
        servicetypeItemOptions = await _oclservice.GetServiceTypeOptionsAsync();
        availableAWBCount = await _oclservice.GetAvailableAWBCountAsyncEDP();
    }

    private void LoadStaticOptions()
    {
        deliveryItemOptions = _oclservice.GetDeliveryTypeOptions();
        linehaulItemOptions = _oclservice.GetLinehaulOptions();
        unitWeightOptions = _oclservice.GetUnitWeightOptions();
    }

    #endregion

    #region Event Handlers

    private async Task HandleValidSubmit(EditContext context)
    {
        if (!isPacking)
        {
            await ShowPackingErrorAsync();
            return;
        }

        try
        {
            // entryData.Shipper.branchid = 1;
            entryData.Shipment.trxtype = "REG";
            entryData.Consignee.countrycode = "ID";

            await _oclservice.SaveEntryDataPrimaryASync(entryData);
            availableAWBCount = await _oclservice.GetAvailableAWBCountAsyncEDP();
            entryData.awb = entryData.Shipment?.awb;
            StateHasChanged();

            await toastService.Show(new ToastOption
                {
                    Category = ToastCategory.Success,
                    Title = "Sukses",
                    Content = "Data berhasil disimpan!",
                    Delay = 4000,
                    IsAutoHide = true
                });

            ViewData();
        }
        catch (Exception ex)
        {
            await toastService.Show(new ToastOption
                {
                    Category = ToastCategory.Error,
                    Title = "Gagal",
                    Content = $"Gagal menyimpan data: {ex.Message}",
                    Delay = 5000,
                    IsAutoHide = false
                });
        }
    }

    private void OnPackingStateChanged(CheckboxState state)
    {
        packingState = state;
        isPacking = state == CheckboxState.Checked;

        if (!isPacking)
        {
            // Reset value dropdown saat uncheck
            entryData.Shipment.packingtype = "";
        }
    }

    //autofil shipper act no
    private async Task OnAccountSelected(string selectedAcctNo)
    {
        var account = await _service1.GetAccountByAcctNoAsync(selectedAcctNo);
        var accountAddr = await _oclservice.GetAccountAddrByAcctNoAsync(selectedAcctNo);
        if (account is not null)
        {
            entryData.Shipper.acctno = account.acctno;
            entryData.Shipper.shippername = account.acctname;
            entryData.Shipper.branchid = account.branchid;
            entryData.Shipper.addr1 = accountAddr.addr1;

            entryData.Shipper.distid = accountAddr.distid;

            var district = await _service1.GetDistrictByDistrictId(accountAddr.distid);
            entryData.districtName = district?.distname;

            entryData.Shipper.cityname = accountAddr.cityname;
            entryData.Shipper.provname = accountAddr.provname;
            entryData.Shipper.postcode = accountAddr.postcode;
            entryData.Shipper.phone = accountAddr.phone;
            entryData.Shipper.email = accountAddr.email;
            StateHasChanged();
        }
    }

    private Task OnLinehaulChanged(SelectedItem item)
    {
        return CalculateVolWeight();
    }

    private Task OnActWeightChanged(decimal value)
    {
        entryData.Shipment.actweight = value;
        return CalculateVolWeight();
    }

    private Task OnLengthChanged(decimal? value)
    {
        entryData.VolWeight.Length = value;
        return CalculateVolWeight();
    }

    private Task OnWidthChanged(decimal? value)
    {
        entryData.VolWeight.Width = value;
        return CalculateVolWeight();
    }

    private Task OnHeightChanged(decimal? value)
    {
        entryData.VolWeight.Height = value;
        return CalculateVolWeight();
    }

    private Task<bool> OnQueryCondition(string name) => Task.FromResult(!isViewClicked);
    private Task<bool> OnQueryCondition2(string name) => Task.FromResult(isViewClicked);

    #endregion

    #region View Management

    private void ViewData()
    {
        PrepareSummaryData();
        isViewClicked = true;
        StateHasChanged();
    }

    private void BackToForm()
    {
        isViewClicked = false;
        StateHasChanged();
    }

    #endregion

    #region Reset Methods

    private void ResetShipmentDetail()
    {
        entryData.Shipment = new ShipmentDetail();
        StateHasChanged();
    }
    private void ResetConsignee()
    {
        entryData.Consignee = new ConsigneeDetail();
        StateHasChanged();
    }
    private void ResetAll()
    {
        entryData = new EntryDataPrimaryDto();
        packingState = CheckboxState.UnChecked;
        isPacking = false;
    }

    #endregion

    #region Helpers

    private async Task ShowPackingErrorAsync()
    {
        await toastService.Show(new ToastOption
            {
                Category = ToastCategory.Warning,
                Title = "Gagal",
                Content = "Opsi Packing belum dipilih!",
                Delay = 4000,
                IsAutoHide = true
            });
    }

    private void PrepareSummaryData()
    {
        CombinedList.Clear();

        var shipper = entryData.Shipper;
        var consignee = entryData.Consignee;
        var shipment = entryData.Shipment;

        var formattedPickupDate = shipment.pickupdate.ToDateTime(TimeOnly.MinValue);

        if (!string.IsNullOrWhiteSpace(shipper?.shippername) && !string.IsNullOrWhiteSpace(consignee?.cnename))
        {
            CombinedList.Add(new CombinedTransactionDto
                {
                    AWB = shipment.awb?.Trim(),
                    PickupDate = shipment.pickupdate != DateOnly.MinValue ? shipment.pickupdate.ToString("dd/MM/yyyy") : "-",
                    ShipperName = shipper.shippername?.Trim(),
                    ShipperAddress = shipper.addr1?.Trim(),
                    ConsigneeName = consignee.cnename?.Trim(),
                    ConsigneeAddress = consignee.addr1?.Trim(),
                    Destination = consignee.descode?.Trim(),
                    ServiceType = shipment.service?.Trim(),
                    Pieces = shipment.pieces,
                    ActualWeight = shipment.actweight,
                    ChargeWeight = shipment.chargeweight,
                    PackingType = shipment.packingtype?.Trim()
                });
        }
    }

    private Task CalculateVolWeight()
        {
            var shipment = entryData.Shipment;
            var vol = entryData.VolWeight;

            if (vol == null)
            {
                shipment.volweight = 0;
                shipment.chargeweight = shipment.actweight;
                return Task.CompletedTask;
            }

            var length = vol.Length ?? 0;
            var width = vol.Width ?? 0;
            var height = vol.Height ?? 0;

            if (length == 0 || width == 0 || height == 0)
            {
                shipment.volweight = 0;
                shipment.chargeweight = shipment.actweight;
                return Task.CompletedTask;
            }

            var divisor = shipment.linehaul == "UDARA" ? 5000 : 4000;

            shipment.volweight = (length * width * height) / divisor;

            shipment.chargeweight = Math.Max(shipment.volweight, shipment.actweight);

            return Task.CompletedTask;
        }


    #endregion
  
}
