@page "/master/account"
@using iDss.X.Models
@using BootstrapBlazor.Components
@inject ToastService _toastService
@inject MasterDataPart1Service _services
@inject MasterDataPart3Service _services3
@attribute [TabItemOption(Text = "Account")]


<PageTitle>Account Management</PageTitle>

@if (accounts != null)
{
    <Row ItemsPerRow="ItemsPerRow.One">
        <Row ItemsPerRow="ItemsPerRow.Two">
            <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="@StackAlignItems.Center">
                <StackItem><h5>Account</h5></StackItem>
            </Stack>
        </Row>

        <Table Items="accounts" IsPagination="true" PageItemsSource="@_services.PageItemsSource"
        IsFixedHeader="true" ShowLoading="true" IsStriped="true" IsBordered="true"
        ShowToolbar="true" AutoGenerateColumns="false" ShowSearch="true"
        ShowExtendButtons="false" ShowEditButton="false" ShowAddButton="false" ShowDeleteButton="false">

            <TableToolbarTemplate>
                <TableToolbarButton TItem="Account" Color="Color.Primary" Icon="fa-solid fa-plus"
                Text="Add" IsAsync OnClickCallback="@ShowAddModal" />
            </TableToolbarTemplate>

            <TableColumns>
                <TableColumn @bind-Field="@context.acctno" Searchable="true" />
                <TableColumn @bind-Field="@context.cif" Searchable="true" />
                <TableColumn @bind-Field="@context.acctname" Searchable="true" />
                <TableColumn @bind-Field="@context.Branch" Text="Branch">
                    <Template Context="x">@x.Row.Branch?.branchname

                    </Template>

                </TableColumn>
                <TableColumn @bind-Field="@context.createddate" Searchable="true" />
                <TableColumn @bind-Field="@context.createdby" Searchable="true" />


                <TableColumn @bind-Field="@context.isrev" Text="">
                    <Template Context="item">
                        <div class="d-grip gap-2 d-md-block">
                            <Button Text="Edit" OnClick="() => ShowEditModal(item.Row.acctno)" Icon="fa-solid fa-pen" Color="Color.Primary" Size="Size.Small"></Button>
                            <PopConfirmButton Placement="Placement.Top" Color="Color.Danger" ConfirmIcon="fa-solid fa-fw" ConfirmButtonColor="Color.Danger"
                            Text="Delete" Content="Are you sure want to delete the data?" Icon="fa-solid fa-trash"
                            IsAsync="true" OnConfirm="() => DeleteAccount(item.Row.acctno)"></PopConfirmButton>
                        </div>
                    </Template>
                </TableColumn>


            </TableColumns>





        </Table>
    </Row>
}
else
{
    <h5>Loading...</h5>
}



<Modal @ref="addModals" IsBackdrop="true" IsFade="true" >
    <ModalDialog Size="Size.Large" Title="@modalTitle" ShowSaveButton="true" OnSaveAsync="SaveAccount">
        <BodyTemplate>
            <ValidateForm @ref="addForm" Model="selectedAccount" @key="@formKey">
                <Row ItemsPerRow="ItemsPerRow.Two">
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.acctname" DisplayText="Account Name" ShowLabel="true" />
                    <AutoComplete Items="CifItems" @bind-Value="selectedAccount.cif" DisplayText="CIF" ShowLabel="true" PlaceHolder="Select CIF">

                    </AutoComplete>
                    <Select TValue="string" @bind-Value="branchidStr"
                    Items="BranchItems" ShowLabel="true" DisplayText="Branch"
                    PlaceHolder="Select Branch" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.lob" DisplayText="LoB" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.costcenter" DisplayText="Cost Center" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.bankacctno" DisplayText="Bank AcctNo" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.bankacctname" DisplayText="Bank Account Name" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.bankcode" DisplayText="Bank Code" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.frp" DisplayText="FRP" ShowLabel="true" />
                    <DateTimePicker @bind-Value="selectedAccount.agreedate" Format="yyyy-MM-dd" DatePlaceHolderText="Select Agreement Date"/>
                    <DateTimePicker @bind-Value="selectedAccount.agreeexpire"  Format="yyyy-MM-dd" DatePlaceHolderText="Select Expiry Date"/>
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.termofpayment" DisplayText="Term of Payment" Placeholder="Input Term of Payment" ShowLabel="true" />
                    <BootstrapInputNumber TValue="decimal?" @bind-Value="selectedAccount.creditlimit" DisplayText="Credit Limit" Placeholder="Input Credit Period" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.creditperiod" DisplayText="Credit Period" Placeholder="Input Credit Period" ShowLabel="true" />
                    <BootstrapInputNumber TValue="int?" @bind-Value="selectedAccount.iscod" DisplayText="CoD" Placeholder="" ShowLabel="true"  Max="1" Min="0"/>
                    <BootstrapInputNumber TValue="decimal?" @bind-Value="selectedAccount.feecod" DisplayText="Fee CoD" Placeholder="Input Fee CoD" ShowLabel="true" />
                    <BootstrapInputNumber TValue="int?" @bind-Value="selectedAccount.isintl" DisplayText="INTL" Placeholder="" ShowLabel="true" Max="1" Min="0" />
                    <BootstrapInputNumber TValue="int?" @bind-Value="selectedAccount.isnl" DisplayText="NL" Placeholder="" ShowLabel="true" Max="1" Min="0" />
                    <BootstrapInputNumber TValue="decimal?" @bind-Value="selectedAccount.discrates" DisplayText="Discrates" Placeholder="Input Discrates" ShowLabel="true" />
                    <BootstrapInputNumber TValue="int?" @bind-Value="selectedAccount.isrev" DisplayText="Rev" Placeholder="" ShowLabel="true" Max="1" Min="0" />
                    <BootstrapInputNumber TValue="int?" @bind-Value="selectedAccount.istrace" DisplayText="Trace" Placeholder="" ShowLabel="true" Max="1" Min="0" />

                </Row>
            </ValidateForm>
        </BodyTemplate>
    </ModalDialog>
</Modal>




<Modal @ref="editModals" IsBackdrop="true" IsFade="true">
    <ModalDialog Size="Size.Large" Title="@modalTitle" ShowSaveButton="true" OnSaveAsync="SaveAccount">
        <BodyTemplate>
            <ValidateForm Model="selectedAccount">
                <Row ItemsPerRow="ItemsPerRow.Two">
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.acctno" DisplayText="Account Number" ShowLabel="true" IsDisabled="true"/>
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.acctname" DisplayText="Account Name" ShowLabel="true" />
                 <AutoComplete Items="CifItems" @bind-Value="selectedAccount.cif" DisplayText="CIF" ShowLabel="true">

                    </AutoComplete>
                    <Select TValue="string" @bind-Value="branchidStr"
                    Items="BranchItems" ShowLabel="true" DisplayText="Branch"
                    PlaceHolder="Select Branch" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.lob" DisplayText="LoB" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.costcenter" DisplayText="Cost Center" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.bankacctno" DisplayText="Bank AcctNo" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.bankacctname" DisplayText="Bank Account Name" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.bankcode" DisplayText="Bank Code" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.frp" DisplayText="FRP" ShowLabel="true" />
                    <DateTimePicker @bind-Value="selectedAccount.agreedate" Format="yyyy-MM-dd" DatePlaceHolderText="Select Agreement Date" />
                    <DateTimePicker @bind-Value="selectedAccount.agreeexpire" Format="yyyy-MM-dd" DatePlaceHolderText="Select Expiry Date" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.termofpayment" DisplayText="Term of Payment" Placeholder="Input Term of Payment" ShowLabel="true" />
                    <BootstrapInputNumber TValue="decimal?" @bind-Value="selectedAccount.creditlimit" DisplayText="Credit Limit" Placeholder="Input Credit Period" ShowLabel="true" />
                    <BootstrapInput TValue="string" @bind-Value="selectedAccount.creditperiod" DisplayText="Credit Period" Placeholder="Input Credit Period" ShowLabel="true" />
                    <BootstrapInputNumber TValue="int?" @bind-Value="selectedAccount.iscod" DisplayText="CoD" Placeholder="" ShowLabel="true" Max="1" Min="0" />
                    <BootstrapInputNumber TValue="decimal?" @bind-Value="selectedAccount.feecod" DisplayText="Fee CoD" Placeholder="Input Fee CoD" ShowLabel="true" />
                    <BootstrapInputNumber TValue="int?" @bind-Value="selectedAccount.isintl" DisplayText="INTL" Placeholder="" ShowLabel="true" Max="1" Min="0" />
                    <BootstrapInputNumber TValue="int?" @bind-Value="selectedAccount.isnl" DisplayText="NL" Placeholder="" ShowLabel="true" Max="1" Min="0" />
                    <BootstrapInputNumber TValue="decimal?" @bind-Value="selectedAccount.discrates" DisplayText="Discrates" Placeholder="Input Discrates" ShowLabel="true" />
                    <BootstrapInputNumber TValue="int?" @bind-Value="selectedAccount.isrev" DisplayText="Rev" Placeholder="" ShowLabel="true" Max="1" Min="0" />
                    <BootstrapInputNumber TValue="int?" @bind-Value="selectedAccount.istrace" DisplayText="Trace" Placeholder="" ShowLabel="true" Max="1" Min="0" />

                </Row>
            </ValidateForm>
        </BodyTemplate>
    </ModalDialog>
</Modal>





@code {
    private Modal addModals;
    private Modal editModals;
    public List<Account> accounts = new();
    private Account selectedAccount = new();
    string modalTitle = "Add Account";

    private ValidateForm addForm;


    private DateTime AllowValue = DateTime.Today;
    private IEnumerable<string>? CifItems { get; set; } 
    private IEnumerable<SelectedItem> BranchItems { get; set; } = new List<SelectedItem>();
    private bool IsEditMode => modalTitle == "Edit Account";

    private string selectedIndustryId;
    private string selectedBranchId;


	private Guid formKey = Guid.NewGuid();

    private string branchidStr
    {
        get => selectedAccount.branchid == 0 ? null : selectedAccount.branchid.ToString();
        set
        {
            if (int.TryParse(value, out var val))
            {
                selectedAccount.branchid = val;
            }
            else
            {
                selectedAccount.branchid = 0;
            }
        }
    }




    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }


    private async Task LoadData()
    {
        accounts = (await _services.GetAllAccountAsync()).ToList();

        var branches = await _services3.LoadBranchAsync();
        BranchItems = branches
            .DistinctBy(x => x.branchid)
            .OrderBy(x => x.branchname)
            .Select(x => new SelectedItem
                {
                    Text = x.branchname,
                    Value = x.branchid.ToString()
                }).ToList();

        var cifs = await _services.GetCifAsync();
        CifItems = cifs.Select(x => x.cif);


        StateHasChanged();
    }


    private async Task LoadDropdownData()
    {
        var branches = await _services3.LoadBranchAsync();
        BranchItems = branches
            .DistinctBy(x => x.branchid)
            .OrderBy(x => x.branchname)
            .Select(x => new SelectedItem
                {
                    Text = x.branchname,
                    Value = x.branchid.ToString()
                }).ToList();

        var cifs = await _services.GetCifAsync();
        CifItems = cifs.Select(x => x.cif);
    }



    private async Task ShowAddModal(IEnumerable<Account> items)
    {
        editModals.Close();
        selectedAccount = new Account();
        // selectedAccount.agreedate = null;   
        // selectedAccount.agreeexpire = null;
		formKey = Guid.NewGuid();
        modalTitle = "Create New Account";
        addModals.Show();
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);
    }




    private async Task ShowEditModal(string acct)
    {
		var data = await _services.GetAccountByAcctNoAsync(acct);


        selectedAccount = new Account
            {
                acctno = data.acctno,
                acctname = data.acctname,
                cif = data.cif,
                branchid = data.branchid,
                lob = data.lob,
                costcenter = data.costcenter,
                bankacctno = data.bankacctno,
                bankacctname = data.bankacctname,
                bankcode = data.bankcode,
                frp = data.frp,
                agreedate = data.agreedate,
                agreeexpire = data.agreeexpire,
                termofpayment = data.termofpayment,
                creditlimit = data.creditlimit,
                creditperiod = data.creditperiod,
                iscod = data.iscod,
                feecod = data.feecod,
                isintl = data.isintl,
                isnl = data.isnl,
                discrates = data.discrates,
                isrev = data.isrev,
                istrace = data.istrace,
                flag    = data.flag,
				modifieddate = DateTime.Now,
				modifier = "System",
            };

        modalTitle = "Edit Account";
        editModals.Show();
    }








    private async Task<bool> SaveAccount()
    {
        bool isExisting = !string.IsNullOrWhiteSpace(selectedAccount.acctno)
                          && accounts.Any(c => c.acctno == selectedAccount.acctno);

        bool result;
        if (isExisting)
        {
            selectedAccount.modifieddate = DateTime.Now;
            selectedAccount.modifier = "System";
            result = await _services.UpdateAccountAsync(selectedAccount.acctno, selectedAccount);
            await _toastService.Success($"Account {selectedAccount.acctno} updated successfully", "Success");
        }
        else
        {
            selectedAccount.flag = 1;
            selectedAccount.createddate = DateTime.Now;
            selectedAccount.createdby = "System";

            var createdAccount = await _services.CreateAccountAsync(selectedAccount);
            result = createdAccount != null;
            await _toastService.Success($"Account {selectedAccount.acctno} saved successfully", "Success");
        }

        if (result)
        {
            addModals.Close();
            await LoadData();
        }
		
        return result;
    }


    private async Task<bool> DeleteAccount(string acctno)
    {
        var result = await _services.DeleteAccountAsync(acctno);
        if (result)
        {
            await LoadData();
        }
		StateHasChanged();
        return result;
    }


}
