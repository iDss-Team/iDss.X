@page "/pickup/entrypickuponcall"
@using iDss.X.Models
@using AutoMapper;
@inject MasterDataPart1Service _service1
@inject MasterDataPart2Service _service2
@inject MasterDataPart3Service _service3
@inject PickupService _pickupService
@inject IMapper Mapper;
@attribute [TabItemOption(Text = "On-Call Request")]

<PageTitle>On-Call Request</PageTitle>

@if (pickupRequests != null)
{
    <Row ItemsPerRow="ItemsPerRow.One">
        <Row ItemsPerRow="ItemsPerRow.Two">
            <span>
                <h5>On-Call Request</h5>
            </span>
        </Row>
        <Table Items="pickupRequests" TItem="PickupRequest" IsPagination="false" PageItemsSource="@_pickupService.PageItemsSource" IsFixedHeader="true" ShowLoading="true"
        IsStriped="true" IsBordered="true" ShowToolbar="true" AutoGenerateColumns="false" ShowSearch="true" ShowExtendButtons="false"
        ShowEditButton="false" ShowAddButton="false" ShowDeleteButton="false" IsAutoRefresh AutoRefreshInterval="1000"
        OnDeleteAsync="@_pickupService.DeletePickupRequestByIDAsync" DeleteButtonText="">
            <TableToolbarTemplate>
                <TableToolbarButton TItem="PickupRequest"
                Color="Color.Primary"
                Icon="fa-solid fa-plus"
                Text="Add"
                IsAsync OnClickCallback="@ShowAddModal" />
            </TableToolbarTemplate>
            <TableColumns>
                <TableColumn @bind-Field="@context.pickupno" Text="Pickup No" Searchable="true" Filterable="true" />
                <TableColumn @bind-Field="@context.pickuptype" Text="Pickup Type" Searchable="true" Filterable="true" />
                <TableColumn @bind-Field="@context.pickupdate" Text="Pickup Date" Searchable="true" Filterable="true" />
                <TableColumn @bind-Field="@context.timeto" Text="To Date" Searchable="true" Filterable="true" />
                <TableColumn @bind-Field="@context.createddate" IsVisibleWhenAdd="false" IsVisibleWhenEdit="false" />
                <TableColumn @bind-Field="@context.id" Text="">
                    <Template Context="item">
                        <div class="d-grip gap-2 d-md-block">
                            <Button Text="" OnClick="@(() => ShowEditModal(item.Row.pickupno))" Color="Color.Success" Icon="fa-solid fa-pen"></Button>
                            <PopConfirmButton Color="Color.Danger"
                            Text="" Icon="fa-solid fa-trash"
                            Content="Are you sure you want to delete the data?"
                            ConfirmButtonColor="Color.Danger" Size="Size.None"
                            ConfirmIcon="fa-solid fa-triangle-exclamation text-danger"
                            OnConfirm="@(() => DeletePickupById(item.Row.pickupno))"/>
                        </div>
                    </Template>
                </TableColumn>
            </TableColumns>
        </Table>
    </Row>
}
else
{
    <h5>Loading . . .</h5>
}

<Modal @ref="addModals">
    <ModalDialog Size="Size.ExtraLarge" Title="@addModalTitle" ShowSaveButton="true" OnSaveAsync="SavePickupRequest">
        <BodyTemplate>
            <ValidateForm Model="pickupRequests">
                <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Inline">
                    <Alert Color="Color.Dark" >Detail Pickup</Alert>
                    <Alert Color="Color.Dark">From Account (Shipper)</Alert>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.apireqid" DisplayText="Api Req Id" ShowLabel="true"></BootstrapInput>
                    <AutoComplete Items="@PickupTypes" @bind-Value="selectedPickupno.pickuptype" DisplayText="Pickup Type"></AutoComplete>
                    <AutoComplete Items="@AccountItems" @bind-Value="selectedPickupno.acctno" OnSelectedItemChanged="OnAccountSelected" DisplayText="Account No"></AutoComplete>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.acctname" IsDisabled="true" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.pickuppoint" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.addr" ShowLabel="true"></BootstrapInput>
                    <AutoComplete Items="@DistrictItems" @bind-Value="selectedPickupno.distid" DisplayText="District"></AutoComplete>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.postcode" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.latitude" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.longitude" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.picname" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.phone" DisplayText="Phone" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.email" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="int?" @bind-Value="selectedPickupno.branchid" IsDisabled="true" ShowLabel="true" DisplayText="Branch Id"></BootstrapInput>
                    <AutoComplete Items="@BranchItems" @bind-Value="selectedPickupno.branchname" OnSelectedItemChanged="OnBranchSelected" DisplayText="Branch Name"></AutoComplete>
                    <AutoComplete Items="@CourierItems" @bind-Value="selectedPickupno.couriercode" OnSelectedItemChanged="OnCourierSelected" DisplayText="Courier Code"></AutoComplete>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.couriername" IsDisabled="true" DisplayText="Courier Name" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.transporttype" ShowLabel="true"></BootstrapInput>
                    <DateTimePicker @bind-Value="DateTimeView" />
                    <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Inline">
                        <BootstrapInput TValue="TimeOnly" @bind-Value="selectedPickupno.timefrom"> </BootstrapInput>
                        <BootstrapInput TValue="TimeOnly" @bind-Value="selectedPickupno.timeto"> </BootstrapInput>
                    </Row>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.notes" ShowLabel="true"></BootstrapInput>
                </Row>
            </ValidateForm>
        </BodyTemplate>
    </ModalDialog>
</Modal>

<Modal @ref="editModals">
    <ModalDialog Size="Size.ExtraLarge" Title="@editModalTitle" ShowSaveButton="true" OnSaveAsync="SavePickupRequest">
        <BodyTemplate>
            <ValidateForm Model="pickupRequests">
                <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Inline">
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.apireqid" DisplayText="Api Req Id" ShowLabel="true"></BootstrapInput>
                    <AutoComplete Items="@PickupTypes" @bind-Value="selectedPickupno.pickuptype" DisplayText="Pickup Type"></AutoComplete>
                    <AutoComplete Items="@AccountItems" @bind-Value="selectedPickupno.acctno" OnSelectedItemChanged="OnAccountSelected" DisplayText="Account No"></AutoComplete>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.acctname" IsDisabled="true" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.pickuppoint" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.addr" ShowLabel="true"></BootstrapInput>
                    <AutoComplete Items="@DistrictItems" @bind-Value="selectedPickupno.distid" DisplayText="District"></AutoComplete>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.postcode" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.latitude" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.longitude" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.picname" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.phone" DisplayText="Phone" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.email" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="int?" @bind-Value="selectedPickupno.branchid" IsDisabled="true" ShowLabel="true" DisplayText="Branch Id"></BootstrapInput>
                    <AutoComplete Items="@BranchItems" @bind-Value="selectedPickupno.branchname" OnSelectedItemChanged="OnBranchSelected" DisplayText="Branch Name"></AutoComplete>
                    <AutoComplete Items="@CourierItems" @bind-Value="selectedPickupno.couriercode" OnSelectedItemChanged="OnCourierSelected" DisplayText="Courier Code"></AutoComplete>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.couriername" IsDisabled="true" DisplayText="Courier Name" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.transporttype" ShowLabel="true"></BootstrapInput>
                    <DateTimePicker @bind-Value="DateTimeView" />
                    <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Inline">
                        <BootstrapInput TValue="TimeOnly" @bind-Value="selectedPickupno.timefrom"> </BootstrapInput>
                        <BootstrapInput TValue="TimeOnly" @bind-Value="selectedPickupno.timeto"> </BootstrapInput>
                    </Row>
                    <BootstrapInput TValue="string" @bind-Value="selectedPickupno.notes" ShowLabel="true"></BootstrapInput>
                </Row>
            </ValidateForm>
        </BodyTemplate>
    </ModalDialog>
</Modal>

@code {
    private Modal addModals;
    private Modal editModals;
    private bool isAddModalVisible = false;
    private bool isAEditModalVisible = false;
    public List<PickupRequest> pickupRequests = new();
    private string addModalTitle = "Create New On-Call Request";
    private string editModalTitle = "Edit On-Call Request";
    private PickupRequest selectedPickupno { get; set; } = new PickupRequest();

    private List<string>? DistrictItems { get; set; }
    private IEnumerable<string>? BranchItems { get; set; }
    private IEnumerable<string>? BranchItemsSelected { get; set; }
    private List<string>? AccountItems { get; set; }
    private IEnumerable<string>? CourierItems { get; set; }
    private bool showClock = false;
    private string TimeDisplay => TimeView.ToString(@"hh\:mm");

    private List<string> PickupTypes => ["Schedule", "On-Call", "Agent", "API", "Mobile", "WMS"];

    private DateTime DateTimeView
    {
        get => selectedPickupno.pickupdate.ToDateTime(TimeOnly.MinValue);
        set => selectedPickupno.pickupdate = DateOnly.FromDateTime(value);
    }

    private TimeSpan TimeView
    {
        get => selectedPickupno.timeto.ToTimeSpan();
        set => selectedPickupno.timeto = TimeOnly.FromTimeSpan(value);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async void ShowEditModal(string pickupNoo)
    {
        var data = await _pickupService.GetPickupRequestByPickno(pickupNoo);
        var distnew = await _service1.GetDistrictById(data);
        data.distid = distnew;
        selectedPickupno = Mapper.Map<PickupRequest>(data);
        editModals.Show();
        StateHasChanged();
    }

    private async Task ShowAddModal(IEnumerable<PickupRequest> items)
    {
        selectedPickupno = new PickupRequest();
        StateHasChanged();
        addModals.Show();
    }

    private async Task LoadData()
    {
        pickupRequests = await _pickupService.GetPickupRequestAsync();

        var districts = await _service1.LoadDistrictAsync();
        DistrictItems = districts.Select(b => b.distname).Distinct().ToList();

        var branches = await _service3.LoadBranchAsync();
        BranchItems = branches.Select(b => b.branchname);

        var couriers = await _service2.GetCourierComboAsync();
        CourierItems = couriers.Select(b => b.couriercode);

        var accounts = await _service1.GetAllAccountAsync();
        AccountItems = accounts.Select(b => b.acctno).ToList();

        StateHasChanged();
    }

    private async Task OnBranchSelected(string branchNamee)
    {
        var data = await _pickupService.FindBranchName(branchNamee);

        if(data != null)
        {
            selectedPickupno.branchid = data.branchid;
        }
        StateHasChanged();
    }

    private async Task OnAccountSelected(string acctNooo)
    {
        var data = await _pickupService.FindAccountName(acctNooo);

        if (data != null)
        {
            selectedPickupno.acctname = data.acctname;
        }
        StateHasChanged();
    }

    private async Task OnCourierSelected(string courierCode)
    {
        var data = await _pickupService.FindCourierName(courierCode);

        if (data != null)
        {
            selectedPickupno.couriername = data.couriername;
        }
        StateHasChanged();
    }

    private async Task<string> DeletePickupById(string picknoo)
    {
        if (picknoo == null)
        {
            return "pickno not found";
        }
        var result = await _pickupService.DeletePickupByPickno(picknoo);
        await LoadData();
        StateHasChanged();
        return result;
    }

    private async Task<bool> SavePickupRequest()
    {
        bool result;
        if (pickupRequests.Any(c => c.pickupno == selectedPickupno.pickupno))
        {
            result = await _pickupService.UpdatePickupRequestAsync(selectedPickupno);
        }
        else
        {
            var pickupNo = await _pickupService.GeneratePickupNoAsync();
            if (pickupNo == null)
            {
                return false;
            }
            var distNameToDistId = await _service1.GetDistrictByName(selectedPickupno);

            selectedPickupno.pickupno = pickupNo;
            selectedPickupno.distid = distNameToDistId;
            result = await _pickupService.CreatePickupRequestAsync(selectedPickupno);
        }

        if (result)
        {
            addModals.Close();
            await LoadData();
        }

        return result;
    }
}
